{"cells":[{"cell_type":"markdown","metadata":{"id":"rsYfu1VYDfkr"},"source":["<h1 align='center'>Numpy - многомерные массивы данных</h1>"]},{"cell_type":"markdown","metadata":{"id":"iKX_lMVIDfku"},"source":["[Cсылка](https://disk.yandex.ru/d/IE8K3D5e7q4fEw) на файлы лабораторной"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"peBganQoDfku","executionInfo":{"status":"ok","timestamp":1663060404081,"user_tz":-180,"elapsed":1165,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[],"source":["# комменарий\n","%matplotlib inline \n","#команда об интерактивном использовании matplotlib\n","import matplotlib.pyplot as plt #импорт функций подмодуля pyplot об интерактивном \n","#использовании matplotlib"]},{"cell_type":"markdown","metadata":{"id":"_pP2ZKpiDfkv"},"source":["## Введение"]},{"cell_type":"markdown","metadata":{"id":"u_PsXuU7Dfkw"},"source":["Пакет `numpy` (модуль) используется почти во всех численных вычислениях с использованием Python. Это пакет, который обеспечивает высокопроизводительные векторные, матричные и многомерные структуры данных для Python. Он реализован на C и Fortran, поэтому, когда вычисления векторизуются (формулируются векторами и матрицами), производительность очень хорошая.\n","Чтобы использовать `numpy`, вам нужно импортировать модуль, используя, например,:"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"YmB_JNeGDfkw","executionInfo":{"status":"ok","timestamp":1663060408847,"user_tz":-180,"elapsed":1574,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[],"source":["from numpy import * #при этом отсутсвует необходимость использования numpy.array\n","#import nympy as np - позволяет сократить имя объекта используя np.array\n","import numpy as np"]},{"cell_type":"markdown","metadata":{"id":"GUwGlaJaDfkw"},"source":["В пакете `numpy` терминологией, используемой для векторов, матриц и многомерных наборов данных, является *array*.\n"]},{"cell_type":"markdown","metadata":{"id":"bvuYPbejDfkx"},"source":["## Создание `numpy` *arrays*"]},{"cell_type":"markdown","metadata":{"id":"aW5O1S0TDfkx"},"source":["Существует несколько способов инициализации новых массивов numpy, например из\n","\n","* список Python или кортежи\n","* использование функций, предназначенных для генерации массивов numpy, таких как `arange`, `linspace` и т. д.\n","* чтение данных из файлов"]},{"cell_type":"markdown","metadata":{"id":"fEEGfBEkDfky"},"source":["### Создание из списка (*list*)"]},{"cell_type":"markdown","metadata":{"id":"VghTVBSJDfky"},"source":["Например, для создания новых векторных и матричных массивов из списков Python мы можем использовать `numpy.array`."]},{"cell_type":"code","execution_count":4,"metadata":{"id":"eStYTCdhDfkz","outputId":"c55194cc-561b-49d7-da9f-695d0469ee6a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663060413548,"user_tz":-180,"elapsed":357,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3, 4])"]},"metadata":{},"execution_count":4}],"source":["# вектор: аргумент функции array список (list) Python\n","v = array([1,2,3,4])\n","\n","v"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DwguVspfDfk0","outputId":"236935c2-9cb1-4b3f-d380-b7d611349bc9"},"outputs":[{"data":{"text/plain":["array([[1, 2],\n","       [3, 4]])"]},"execution_count":72,"metadata":{},"output_type":"execute_result"}],"source":["# матрица: аргумент функции array вложенный список (nestled list) Python\n","M = array([[1, 2], [3, 4]])\n","M"]},{"cell_type":"markdown","metadata":{"id":"qB7xoJ6KDfk0"},"source":[" `v` и `M` -- объекты общего типа `ndarray`, который создает модуль `numpy`."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u21kGrvNDfk1","outputId":"de3cf9be-1e14-4532-b895-37b36216fe0a"},"outputs":[{"data":{"text/plain":["(numpy.ndarray, numpy.ndarray)"]},"execution_count":73,"metadata":{},"output_type":"execute_result"}],"source":["type(v), type(M)"]},{"cell_type":"markdown","metadata":{"id":"mu4E2NJyDfk1"},"source":["Разница между `v` и `M` заключается только в их форме. Мы можем получить информацию о форме массива с помощью `ndarray.shape` свойства."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9i-gogIWDfk2","outputId":"5695a794-6462-49b4-9a8c-3c687e0a0b1d"},"outputs":[{"data":{"text/plain":["(4,)"]},"execution_count":74,"metadata":{},"output_type":"execute_result"}],"source":["v.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wSJCXAUVDfk2","outputId":"629e0629-a887-4e2c-f1cb-db06b8da3f83"},"outputs":[{"data":{"text/plain":["(2, 2)"]},"execution_count":75,"metadata":{},"output_type":"execute_result"}],"source":["M.shape"]},{"cell_type":"markdown","metadata":{"id":"2iWQhd50Dfk3"},"source":["Количество элементов в массиве доступно через свойство `ndarray.size`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Iyelk0TWDfk3","outputId":"3c6ffecf-2d59-498c-f671-0f93cf124d81"},"outputs":[{"data":{"text/plain":["4"]},"execution_count":76,"metadata":{},"output_type":"execute_result"}],"source":["M.size"]},{"cell_type":"markdown","metadata":{"id":"1odZlMARDfk3"},"source":["Так же можно использовать функции `numpy.shape` и `numpy.size`. Использование дублирующих методы функций характерно для Python как языка поддерживающего как объектно-ориентированную так и функциональную парадигмы программирования."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q9PAGxDODfk4","outputId":"77133d87-b4df-4609-bbe3-d94d93c299e7"},"outputs":[{"data":{"text/plain":["(2, 2)"]},"execution_count":77,"metadata":{},"output_type":"execute_result"}],"source":["shape(M)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"foNVJjONDfk4","outputId":"f3813f61-63cb-44ea-a51c-f9b77de60a1d"},"outputs":[{"data":{"text/plain":["4"]},"execution_count":78,"metadata":{},"output_type":"execute_result"}],"source":["size(M)"]},{"cell_type":"markdown","metadata":{"id":"1Og6XwacDfk4"},"source":["До сих пор `numpy.ndarray` ужасно похож на список Python (или вложенный список). Почему бы просто не использовать списки Python для вычислений вместо создания нового типа массива?\n","\n","Есть несколько причин:\n","\n","* Списки Python очень общие. Они могут содержать любой вид объекта. Они динамически типизируются. Они не поддерживают математические функции, такие как матричное и точечное умножение и т. д. Реализация таких функций для списков Python была бы не очень эффективной из-за динамической типизации.\n","* Массивы Numpy **статически типизированы** и **однородны**. Тип элементов определяется при создании массива.\n","* Массивы Numpy эффективны для работы с памятью.\n","* Из-за статической типизации быстро реализуются математические функции, такие как умножение и сложение массивов `numpy`, функции могут быть реализованы на компилируемом языке (используется C и Fortran).\n","\n","Используя свойство `dtype` (тип данных) `ndarray`, мы можем увидеть, какой тип имеют данные массива:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rPdb24RkDfk5","outputId":"d3192248-c4f7-4df4-c86a-447d64137d9c"},"outputs":[{"data":{"text/plain":["dtype('int32')"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["M.dtype"]},{"cell_type":"markdown","metadata":{"id":"pUFLMMtiDfk5"},"source":["Обратите внимание, что при не совпадении типов при присвоении будет выдана ошибка, что есть следствие статической типизации `ndarray`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T5OSUSZGDfk6","outputId":"9ce13dbf-06a5-4c43-f9b4-957cebf0ba71"},"outputs":[{"ename":"ValueError","evalue":"invalid literal for int() with base 10: 'hello'","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[1;32m<ipython-input-80-e1f336250f69>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mM\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"hello\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: 'hello'"]}],"source":["M[0,0] = \"hello\""]},{"cell_type":"markdown","metadata":{"id":"1aGDKkZoDfk6"},"source":["Если мы хотим, мы можем явно определить тип данных массива при его создании, используя аргумент ключевого слова `dtype`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XWFne3mzDfk7","outputId":"c5290d5d-b502-4342-a957-d2e0de750f7d"},"outputs":[{"data":{"text/plain":["array([[1.+0.j, 2.+0.j],\n","       [3.+0.j, 4.+0.j]])"]},"execution_count":81,"metadata":{},"output_type":"execute_result"}],"source":["M = array([[1, 2], [3, 4]], dtype=complex)\n","\n","M"]},{"cell_type":"markdown","metadata":{"id":"4guoiGHjDfk7"},"source":["Общие типы данных, которые можно использовать с `dtype`: `int`, `float`, `complex`, `bool`, `object` и т. д.\n","\n","Мы также можем явно определить битовый размер типов данных, например: `int64`, `int16`, `float128`, `complex128`."]},{"cell_type":"markdown","metadata":{"id":"8AALWH0jDfk8"},"source":["### Задание 1\n","Создайте матрицу таблицы умножения с использованием списков"]},{"cell_type":"code","source":["a = arange(1,10)\n","b = arange(1,10).reshape(9,1)\n","tabl = b*a\n","tabl"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0bFvqklPF4l7","executionInfo":{"status":"ok","timestamp":1663060420566,"user_tz":-180,"elapsed":259,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"d92db85c-d35f-4c73-9e16-0f5b064e2015"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9],\n","       [ 2,  4,  6,  8, 10, 12, 14, 16, 18],\n","       [ 3,  6,  9, 12, 15, 18, 21, 24, 27],\n","       [ 4,  8, 12, 16, 20, 24, 28, 32, 36],\n","       [ 5, 10, 15, 20, 25, 30, 35, 40, 45],\n","       [ 6, 12, 18, 24, 30, 36, 42, 48, 54],\n","       [ 7, 14, 21, 28, 35, 42, 49, 56, 63],\n","       [ 8, 16, 24, 32, 40, 48, 56, 64, 72],\n","       [ 9, 18, 27, 36, 45, 54, 63, 72, 81]])"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":[],"metadata":{"id":"X1pWaFIyIWW3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nbSulygaDfk8"},"source":["### Функции генерирующие массивы."]},{"cell_type":"markdown","metadata":{"id":"Uu-f9qRBDfk8"},"source":["Для больших массивов нецелесообразно инициализировать данные вручную, используя явные списки Python. Вместо этого мы можем использовать одну из многих функций в `numpy`, которые генерируют массивы различных форм. Некоторые из наиболее распространенных являются:"]},{"cell_type":"markdown","metadata":{"id":"wsZeHL6XDfk8"},"source":["#### Функция arange"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Syoww3bDfk9","outputId":"fb37d027-5f8c-44c3-da42-c140e01af0c6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663015453724,"user_tz":-180,"elapsed":285,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([10,  9,  8,  7,  6])"]},"metadata":{},"execution_count":8}],"source":["# массив целых от 0 до 10\n","\n","x = arange(10, 5, -1) # аргументы: начало, конец, шаг\n","x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TojFzmoCDfk_","outputId":"37815560-59d5-472a-e5da-b81b4a4e892e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663015475257,"user_tz":-180,"elapsed":276,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-1.00000000e+00, -9.00000000e-01, -8.00000000e-01, -7.00000000e-01,\n","       -6.00000000e-01, -5.00000000e-01, -4.00000000e-01, -3.00000000e-01,\n","       -2.00000000e-01, -1.00000000e-01, -2.22044605e-16,  1.00000000e-01,\n","        2.00000000e-01,  3.00000000e-01,  4.00000000e-01,  5.00000000e-01,\n","        6.00000000e-01,  7.00000000e-01,  8.00000000e-01,  9.00000000e-01])"]},"metadata":{},"execution_count":9}],"source":["x = arange(-1, 1, 0.1)\n","\n","x"]},{"cell_type":"markdown","metadata":{"id":"lpbLyma8Dfk_"},"source":["#### Функции linspace и logspace"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3yLxw0YoDfk_","outputId":"c7b567d4-769d-4931-8d72-20d0259589bb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662455730869,"user_tz":-180,"elapsed":252,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 5. ,  5.5,  6. ,  6.5,  7. ,  7.5,  8. ,  8.5,  9. ,  9.5, 10. ])"]},"metadata":{},"execution_count":6}],"source":["# использование linspace, оба конечных значения включены\n","linspace(5, 10, 11)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-VcGM8FpDflA","outputId":"04beb962-028c-47c4-ced9-2267e88c49ad","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662455740638,"user_tz":-180,"elapsed":269,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07,\n","       1.e+08, 1.e+09, 1.e+10])"]},"metadata":{},"execution_count":7}],"source":["logspace(0, 10, 11, base=10) # создание равномерной последовальности в логарифмической шкале"]},{"cell_type":"markdown","metadata":{"id":"R8FqfTwyDflA"},"source":["#### Функция mgrid"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XnuZLJStDflA"},"outputs":[],"source":["x, y = mgrid[0:5, 0:5] #создает сетку равномерно расположенных значений подобно meshgrid в MATLAB"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_0m2ybuXDflA","outputId":"206e2864-ac47-4ca2-fb0f-e2c40e06d353","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663015513173,"user_tz":-180,"elapsed":282,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 0, 0, 0, 0],\n","       [1, 1, 1, 1, 1],\n","       [2, 2, 2, 2, 2],\n","       [3, 3, 3, 3, 3],\n","       [4, 4, 4, 4, 4]])"]},"metadata":{},"execution_count":11}],"source":["x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4HabuJK7DflA","outputId":"49b7dd9c-1116-42e9-e685-7e2b0e2cb207","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662455782393,"user_tz":-180,"elapsed":280,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 1, 2, 3, 4],\n","       [0, 1, 2, 3, 4],\n","       [0, 1, 2, 3, 4],\n","       [0, 1, 2, 3, 4],\n","       [0, 1, 2, 3, 4]])"]},"metadata":{},"execution_count":10}],"source":["y"]},{"cell_type":"markdown","metadata":{"id":"9xQQbKLuDflA"},"source":["#### Создание случайных данных средствами random"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qyN1SVGhDflB"},"outputs":[],"source":["from numpy import random"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"we4jQ7HnDflB","outputId":"14484c00-a9ab-4ef0-f891-9703fb6371d1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662455816719,"user_tz":-180,"elapsed":267,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.79984766, 0.97538464, 0.78744212, 0.15761253, 0.83999135],\n","       [0.38905836, 0.21354239, 0.66314092, 0.28780344, 0.02591189],\n","       [0.77606805, 0.95489867, 0.20849422, 0.54921075, 0.79409711],\n","       [0.34090046, 0.38230643, 0.62814923, 0.80882849, 0.70639434],\n","       [0.40000765, 0.37482091, 0.32901767, 0.03689977, 0.75309087]])"]},"metadata":{},"execution_count":12}],"source":["# случайные данные с равномерным распределением в отрезке [0,1]\n","random.rand(5,5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qFzhl5PKDflB","outputId":"28fd3c5b-ccef-4eba-be8d-45944483e62f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662455831694,"user_tz":-180,"elapsed":286,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0.6809247 , -0.36862724,  1.29363975, -0.32550029,  1.55661887],\n","       [ 0.45299137, -0.06302991, -1.02290115,  0.20745987,  0.46895944],\n","       [ 0.40974205,  0.81303995,  0.0207909 ,  0.24708358,  1.56820493],\n","       [-2.0845676 , -0.56463687, -2.11120708,  0.33824908,  0.89824828],\n","       [-0.23736426,  0.90250607, -0.25925949, -2.10934147, -1.4433017 ]])"]},"metadata":{},"execution_count":13}],"source":["# случайные данные с нормальным распределением\n","random.randn(5,5)"]},{"cell_type":"markdown","metadata":{"id":"zlyojC_9DflB"},"source":["#### Создание квадратных матриц функцией diag"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2XZMUXlqDflB","outputId":"36a96207-117c-4dde-92d6-cd033fd2ba23","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662455841822,"user_tz":-180,"elapsed":258,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 0, 0],\n","       [0, 2, 0],\n","       [0, 0, 3]])"]},"metadata":{},"execution_count":14}],"source":["# матрица с диагональю\n","diag([1,2,3])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EGt9YYklDflB","outputId":"8df989bd-a356-4b06-806a-b3ca72063fa7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662455848048,"user_tz":-180,"elapsed":276,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 1, 0, 0],\n","       [0, 0, 2, 0],\n","       [0, 0, 0, 3],\n","       [0, 0, 0, 0]])"]},"metadata":{},"execution_count":15}],"source":["# матрица со сдвинутой диагональю\n","diag([1,2,3], k=1) "]},{"cell_type":"markdown","metadata":{"id":"3gZI-i1QDflB"},"source":["#### Матрицы или спецмассивы zeros и ones"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KJ8uPPO6DflC","outputId":"1e3fc173-aea4-4e0c-a3a1-645e3d29fcac","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662455859233,"user_tz":-180,"elapsed":255,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0.],\n","       [0., 0., 0.],\n","       [0., 0., 0.]])"]},"metadata":{},"execution_count":16}],"source":["zeros((3,3))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PVu_Cg_PDflC","outputId":"72df6a86-ad46-4887-b0c8-faaf3bea91a3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662455859480,"user_tz":-180,"elapsed":3,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1., 1., 1.],\n","       [1., 1., 1.],\n","       [1., 1., 1.]])"]},"metadata":{},"execution_count":17}],"source":["ones((3,3))"]},{"cell_type":"markdown","metadata":{"id":"ZzchVSVADflC"},"source":["### Задание 2\n","Создайте функцию, которая принимает как аргументы целое число N и первый элемент (вещественное число el1), и разность (вещественное число d) и создает матрицу по диагонали, которой распологаются первые N членов арифметической прогрессии. "]},{"cell_type":"code","source":["def matrx(N, dtype = int):\n","  return diag(np.arange(N,N+5,1))\n","matrx(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_OnV29jqKc0T","executionInfo":{"status":"ok","timestamp":1663060429697,"user_tz":-180,"elapsed":10,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"bb5795f4-80db-45d7-e21c-4ae7394fc38e"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[3, 0, 0, 0, 0],\n","       [0, 4, 0, 0, 0],\n","       [0, 0, 5, 0, 0],\n","       [0, 0, 0, 6, 0],\n","       [0, 0, 0, 0, 7]])"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"v-b9EBBZDflC"},"source":["## Запись и чтение в файл"]},{"cell_type":"markdown","metadata":{"id":"f0v0jJ11DflC"},"source":["### Файлы данных Comma-separated values (CSV)"]},{"cell_type":"markdown","metadata":{"id":"PGWkHO8EDflC"},"source":["Очень распространенным форматом файлов данных являются значения, разделенные запятыми (CSV), или связанные с ними форматы, такие как TSV (значения, разделенные табуляциями). Для чтения данных из таких файлов в массивы Numpy мы можем использовать функцию `numpy.genfromtxt`. Например:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b0M6lF75DflC"},"outputs":[],"source":["data = genfromtxt('stockholm_td_adj.dat')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S7kIv6lKDflD","outputId":"4365b6e7-35f8-4996-9ea8-1aef497d0e95"},"outputs":[{"data":{"text/plain":["(77431, 7)"]},"execution_count":97,"metadata":{},"output_type":"execute_result"}],"source":["data.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3ll_2D6cDflD","outputId":"092a1371-4730-4a87-f95f-f323cd17d5df"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1008x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["fig, ax = plt.subplots(figsize=(14,4))\n","x=linspace(1,32,31)\n","y=array([data[i,5] for i in range(data.shape[0]) if (data[i,0]==1950)*(data[i,1]==5)])\n","ax.plot(x,y)\n","ax.axis('tight')\n","ax.set_title('tempeatures in Stockholm')\n","ax.set_xlabel('year')\n","ax.set_ylabel('temperature (C)');\n"]},{"cell_type":"markdown","metadata":{"id":"yhInuRfZDflD"},"source":["Используя `numpy.savetxt` можно записать Numpy массив в файл CSV формате:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5fwiwNm8DflD","outputId":"4d505eb4-82d8-4642-aa33-11ac8c5a770c"},"outputs":[{"data":{"text/plain":["array([[0.01957785, 0.26105203, 0.59452319],\n","       [0.84042664, 0.36882056, 0.06497298],\n","       [0.88157179, 0.65403621, 0.7400268 ]])"]},"execution_count":100,"metadata":{},"output_type":"execute_result"}],"source":["M = random.rand(3,3)\n","\n","M"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QfeqqJrRDflD"},"outputs":[],"source":["savetxt(\"random-matrix.csv\", M)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5nT4V7vzDflD","outputId":"2a2168c8-00dd-4a37-8914-264b625c1d94"},"outputs":[{"data":{"text/plain":["array([[0.01958, 0.26105, 0.59452],\n","       [0.84043, 0.36882, 0.06497],\n","       [0.88157, 0.65404, 0.74003]])"]},"execution_count":103,"metadata":{},"output_type":"execute_result"}],"source":["savetxt(\"random-matrix.csv\", M, fmt='%.5f') # fmt определяет формат данных\n","rand_data = genfromtxt('random-matrix.csv')\n","rand_data"]},{"cell_type":"markdown","metadata":{"id":"5jjF2VETDflD"},"source":["### Формат файлов Numpy"]},{"cell_type":"markdown","metadata":{"id":"EoeSCDqaDflD"},"source":["Полезно при хранении и считывании данных массива numpy. Используйте функции `numpy.save` и `numpy.load`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XDWheRkqDflE"},"outputs":[],"source":["save(\"random-matrix.npy\", M)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZR1Wa9R6DflE","outputId":"ea9acfc7-d3ad-47db-83e3-ce05ae7b2cd8"},"outputs":[{"data":{"text/plain":["array([[0.01957785, 0.26105203, 0.59452319],\n","       [0.84042664, 0.36882056, 0.06497298],\n","       [0.88157179, 0.65403621, 0.7400268 ]])"]},"execution_count":105,"metadata":{},"output_type":"execute_result"}],"source":["load(\"random-matrix.npy\")"]},{"cell_type":"markdown","metadata":{"id":"yC_yv2Z0DflE"},"source":["### Задание 3\n","Из данных по температуре в Стокгольме выбрать данные относящиеся к октябрю 1970 года и записать их в бинарный и текстовый файлы oct70.bin и oct70.txt. Затем прочитайте их импортировав в тетрадь ноутбука и сравните."]},{"cell_type":"code","source":["data = genfromtxt('/content/stockholm_td_adj.dat')"],"metadata":{"id":"qFWEiJgNMqfP","executionInfo":{"status":"ok","timestamp":1663060437199,"user_tz":-180,"elapsed":1394,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["oct70 = data[(data[:,0] == 1970) & (data[:,1] == 10)]\n"],"metadata":{"id":"iNZHmj89h_b9","executionInfo":{"status":"ok","timestamp":1663060438393,"user_tz":-180,"elapsed":4,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["oct70"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ijRKQ9xOgLH8","executionInfo":{"status":"ok","timestamp":1663060449335,"user_tz":-180,"elapsed":879,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"459bd2d0-d528-4856-aea6-914d41c6edb5"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1.97e+03, 1.00e+01, 1.00e+00, 1.07e+01, 1.04e+01, 1.04e+01,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.00e+00, 9.30e+00, 9.00e+00, 9.00e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 3.00e+00, 8.10e+00, 7.80e+00, 7.80e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 4.00e+00, 6.90e+00, 6.60e+00, 6.60e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 5.00e+00, 8.20e+00, 7.90e+00, 7.90e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 6.00e+00, 1.10e+01, 1.07e+01, 1.07e+01,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 7.00e+00, 1.25e+01, 1.22e+01, 1.22e+01,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 8.00e+00, 1.25e+01, 1.22e+01, 1.22e+01,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 9.00e+00, 1.05e+01, 1.02e+01, 1.02e+01,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.00e+01, 1.11e+01, 1.09e+01, 1.09e+01,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.10e+01, 9.90e+00, 9.70e+00, 9.70e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.20e+01, 9.20e+00, 9.00e+00, 9.00e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.30e+01, 6.90e+00, 6.70e+00, 6.70e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.40e+01, 5.00e+00, 4.80e+00, 4.80e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.50e+01, 8.40e+00, 8.20e+00, 8.20e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.60e+01, 1.01e+01, 9.90e+00, 9.90e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.70e+01, 1.01e+01, 9.80e+00, 9.80e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.80e+01, 8.90e+00, 8.60e+00, 8.60e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 1.90e+01, 9.10e+00, 8.80e+00, 8.80e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.00e+01, 7.60e+00, 7.30e+00, 7.30e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.10e+01, 6.50e+00, 6.20e+00, 6.20e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.20e+01, 3.30e+00, 3.00e+00, 3.00e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.30e+01, 8.00e-01, 5.00e-01, 5.00e-01,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.40e+01, 4.80e+00, 4.50e+00, 4.50e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.50e+01, 6.60e+00, 6.30e+00, 6.30e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.60e+01, 3.60e+00, 3.30e+00, 3.30e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.70e+01, 1.90e+00, 1.60e+00, 1.60e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.80e+01, 2.00e+00, 1.70e+00, 1.70e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 2.90e+01, 2.60e+00, 2.30e+00, 2.30e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 3.00e+01, 2.20e+00, 1.80e+00, 1.80e+00,\n","        1.00e+00],\n","       [1.97e+03, 1.00e+01, 3.10e+01, 1.50e+00, 1.10e+00, 1.10e+00,\n","        1.00e+00]])"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["save('oct70.txt',oct70)\n"],"metadata":{"id":"VjKm3YEaQFPD","executionInfo":{"status":"ok","timestamp":1663060456042,"user_tz":-180,"elapsed":537,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["oct70.tofile('oct70.bin')"],"metadata":{"id":"LEuCvJDbTzba","executionInfo":{"status":"ok","timestamp":1663063540841,"user_tz":-180,"elapsed":276,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":87,"outputs":[]},{"cell_type":"code","source":["# data1 = genfromtxt('oct70.txt')"],"metadata":{"id":"Cy7wd24gOmog","executionInfo":{"status":"ok","timestamp":1663063545211,"user_tz":-180,"elapsed":272,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":88,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kLI8LZXUDflE"},"source":["## Дополнительные свойства `numpy` *arrays*"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1KhpgP5iDflE","outputId":"d0909531-87e6-4bb3-853d-1ca67541e2b0"},"outputs":[{"data":{"text/plain":["8"]},"execution_count":106,"metadata":{},"output_type":"execute_result"}],"source":["M.itemsize # размер элемента в байтах"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dC34PpkYDflE","outputId":"429812ae-a54d-446e-f36b-819433a18338"},"outputs":[{"data":{"text/plain":["72"]},"execution_count":107,"metadata":{},"output_type":"execute_result"}],"source":["M.nbytes # кол-во байт"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"InpE5VodDflE","outputId":"61600b40-41f4-4fcb-9b37-ac8f70dbb257"},"outputs":[{"data":{"text/plain":["2"]},"execution_count":108,"metadata":{},"output_type":"execute_result"}],"source":["M.ndim # размерность"]},{"cell_type":"markdown","metadata":{"id":"IcomkjgRDflE"},"source":["## Преобразование массивов"]},{"cell_type":"markdown","metadata":{"id":"PqJChOL4DflF"},"source":["### Использование индексов"]},{"cell_type":"markdown","metadata":{"id":"hIB8_Ii_DflF"},"source":["Доступ к элементам через индекс:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MIOhrqoGDflF","outputId":"d8d6f4a4-1a26-4e89-8d3d-24233331fa07"},"outputs":[{"data":{"text/plain":["1"]},"execution_count":109,"metadata":{},"output_type":"execute_result"}],"source":["# v -- вектор, размерность 1, испльзуем 1 индекс\n","v[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_58NYNjxDflF","outputId":"317226a2-3fe6-4576-ba8d-6602184eabd2"},"outputs":[{"data":{"text/plain":["0.36882056243262484"]},"execution_count":110,"metadata":{},"output_type":"execute_result"}],"source":["# M -- матрица, 2-х мерный объект, используем 2 индекса \n","M[1,1]"]},{"cell_type":"markdown","metadata":{"id":"xn1vcFzeDflF"},"source":["Если мы опустим один из индексов, то получим объект пониженной размерности. В случае двумерной матрицы, получим вектор. "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DaAszCtxDflF","outputId":"6c8fca03-c152-41db-9140-fca81db919db"},"outputs":[{"data":{"text/plain":["array([[0.01957785, 0.26105203, 0.59452319],\n","       [0.84042664, 0.36882056, 0.06497298],\n","       [0.88157179, 0.65403621, 0.7400268 ]])"]},"execution_count":111,"metadata":{},"output_type":"execute_result"}],"source":["M"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WFjE65EhDflF","outputId":"369ea088-9e32-48c0-da67-f627b97c5023"},"outputs":[{"data":{"text/plain":["array([0.84042664, 0.36882056, 0.06497298])"]},"execution_count":112,"metadata":{},"output_type":"execute_result"}],"source":["M[1]"]},{"cell_type":"markdown","metadata":{"id":"1b33ROiIDflF"},"source":["Такой же эффект получится при использовании `:` на месте индекса:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"53Hc1jW1DflF","outputId":"6ec22a4a-d14d-4065-8c18-78b439a0014b"},"outputs":[{"data":{"text/plain":["array([0.84042664, 0.36882056, 0.06497298])"]},"execution_count":113,"metadata":{},"output_type":"execute_result"}],"source":["M[1,:] # строка (row) 1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hWs3qtSRDflG","outputId":"f3c708a3-6763-4368-9475-6f7737377ae6"},"outputs":[{"data":{"text/plain":["array([0.26105203, 0.36882056, 0.65403621])"]},"execution_count":114,"metadata":{},"output_type":"execute_result"}],"source":["M[:,1] # столбец (column) 1"]},{"cell_type":"markdown","metadata":{"id":"uCKXGNTiDflG"},"source":["Мы можем присваивать новые значения элементам массива с помощью индексации:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JP_ERIl3DflG"},"outputs":[],"source":["M[0,0] = 1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"E2c25QtmDflG","outputId":"781e58fd-7c28-49af-fffe-d3992d9fd223"},"outputs":[{"data":{"text/plain":["array([[1.        , 0.26105203, 0.59452319],\n","       [0.84042664, 0.36882056, 0.06497298],\n","       [0.88157179, 0.65403621, 0.7400268 ]])"]},"execution_count":116,"metadata":{},"output_type":"execute_result"}],"source":["M"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XU-mQrKNDflG"},"outputs":[],"source":["# также работает для строк и столбцов\n","M[1,:] = 0\n","M[:,2] = -1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RCDyquLjDflG","outputId":"88ce994d-9bb1-412f-a56e-3093aaa1965f"},"outputs":[{"data":{"text/plain":["array([[ 1.        ,  0.26105203, -1.        ],\n","       [ 0.        ,  0.        , -1.        ],\n","       [ 0.88157179,  0.65403621, -1.        ]])"]},"execution_count":118,"metadata":{},"output_type":"execute_result"}],"source":["M"]},{"cell_type":"markdown","metadata":{"id":"i2h2DdZHDflG"},"source":["### Срезы (*slice*) по индексам"]},{"cell_type":"markdown","metadata":{"id":"zxQ_r9xxDflH"},"source":["Срезы по индексам техническое название `M[нижний индекс:верхний индекс:шаг]` предназначенные для извлечения части массива:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"viLshRu5DflH","outputId":"c6d8e280-7d0d-4cf0-b8a4-ca8e75d18d3a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663017157464,"user_tz":-180,"elapsed":301,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3, 4, 5])"]},"metadata":{},"execution_count":48}],"source":["A = array([1,2,3,4,5])\n","A"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SnzNZwC5DflH","outputId":"6f334b90-8394-464f-9ea3-13f3a906cdf1"},"outputs":[{"data":{"text/plain":["array([2, 3])"]},"execution_count":120,"metadata":{},"output_type":"execute_result"}],"source":["A[1:3]"]},{"cell_type":"markdown","metadata":{"id":"6V8ccsfxDflH"},"source":["Срезы массива являются *изменяемыми (mutable)*: если им присвоено новое значение, то исходный массив, из которого был извлечен срез, изменяется:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uW7QlYnuDflH","outputId":"4b2989af-2889-4d91-f7b1-f9943306e071"},"outputs":[{"data":{"text/plain":["array([ 1, -2, -3,  4,  5])"]},"execution_count":121,"metadata":{},"output_type":"execute_result"}],"source":["A[1:3] = [-2,-3]\n","\n","A"]},{"cell_type":"markdown","metadata":{"id":"sto9zAbMDflH"},"source":["Можно не указывать любой из трех параметров среза`M[нижний индекс:верхний индекс:шаг]`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kX9mgGdwDflH","outputId":"7f5eee66-bea1-4e60-b734-a0c6616a69e2"},"outputs":[{"data":{"text/plain":["array([ 1, -2, -3,  4,  5])"]},"execution_count":122,"metadata":{},"output_type":"execute_result"}],"source":["A[::] # нижний, верхний индексы и шаг (=1) принимают значения по умолчанию"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X_udXaKFDflI","outputId":"2f9fbec8-03ca-47e8-8eff-8773831f0f61"},"outputs":[{"data":{"text/plain":["array([ 1, -3,  5])"]},"execution_count":123,"metadata":{},"output_type":"execute_result"}],"source":["A[::2] # шаг равен 2, нижний и верхний индексы принимают значения начала и конца массива"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iaIfTXDXDflI","outputId":"3e313ae4-7191-4fa8-fef8-e06c01ddb2bd"},"outputs":[{"data":{"text/plain":["array([ 1, -2, -3])"]},"execution_count":124,"metadata":{},"output_type":"execute_result"}],"source":["A[:3] # первые три элемента"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-jgoqiKIDflI","outputId":"c883ba90-9083-455c-d1cc-945b985f7de5"},"outputs":[{"data":{"text/plain":["array([4, 5])"]},"execution_count":125,"metadata":{},"output_type":"execute_result"}],"source":["A[3:] # элементы с индекса 3"]},{"cell_type":"markdown","metadata":{"id":"kVvBqHzXDflI"},"source":["Отрицательные индексы отсчитываются с конца массива (положительные - с начала):"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TuKEfPrLDflI"},"outputs":[],"source":["A = array([1,2,3,4,5])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8A4pJZ1ADflI","outputId":"89d36db8-bf01-41d6-a960-ed1f03862995"},"outputs":[{"data":{"text/plain":["5"]},"execution_count":127,"metadata":{},"output_type":"execute_result"}],"source":["A[-1] # последний элемент массива"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GOh7PaX1DflI","outputId":"73800a39-b465-4547-b672-f5ddba57da48"},"outputs":[{"data":{"text/plain":["array([3, 4, 5])"]},"execution_count":128,"metadata":{},"output_type":"execute_result"}],"source":["A[-3:] # последние 3 элемента"]},{"cell_type":"markdown","metadata":{"id":"U8XJXN6fDflI"},"source":["Индексный срез работает точно так же для многомерных массивов:"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"qETfOwW2DflJ","outputId":"b8005f62-b60d-41a2-c395-1d41c5a29509","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663060471012,"user_tz":-180,"elapsed":383,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 0,  1,  2,  3,  4],\n","       [10, 11, 12, 13, 14],\n","       [20, 21, 22, 23, 24],\n","       [30, 31, 32, 33, 34],\n","       [40, 41, 42, 43, 44]])"]},"metadata":{},"execution_count":12}],"source":["A = array([[n+m*10 for n in range(5)] for m in range(5)])\n","\n","A"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1JLxLsK6DflJ","outputId":"43451610-f81c-4f82-ac5c-28741975f9d6"},"outputs":[{"data":{"text/plain":["array([[11, 12, 13],\n","       [21, 22, 23],\n","       [31, 32, 33]])"]},"execution_count":130,"metadata":{},"output_type":"execute_result"}],"source":["# часть массива\n","A[1:4, 1:4]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cWVNe1eADflJ","outputId":"633ab569-b326-4ed3-9753-0d92e8b5e49a"},"outputs":[{"data":{"text/plain":["array([[ 0,  2,  4],\n","       [20, 22, 24],\n","       [40, 42, 44]])"]},"execution_count":131,"metadata":{},"output_type":"execute_result"}],"source":["# пошаговое извлечение\n","A[::2, ::2]"]},{"cell_type":"markdown","metadata":{"id":"nqFE9oZpDflJ"},"source":["### Задание 4\n","Используя срезы извлеките нечетные элементы матрицы А. "]},{"cell_type":"code","source":["A[A % 2 == 1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YHmXqMxxjCRs","executionInfo":{"status":"ok","timestamp":1663060475677,"user_tz":-180,"elapsed":754,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"29330fe8-cb51-4869-c95b-0a28b26b1f92"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  3, 11, 13, 21, 23, 31, 33, 41, 43])"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":[],"metadata":{"id":"YSBt_tzBlVkR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nQ7Vqgz4DflJ"},"source":["### Необычное индексирование"]},{"cell_type":"markdown","metadata":{"id":"XE3OL6iiDflJ"},"source":["О необычном индексировании говорят, когда массив или список используется в качестве индекса: "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sA5R7JAPDflJ","outputId":"a40738ac-d328-4c9c-8069-af438fd6b75e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663017336149,"user_tz":-180,"elapsed":264,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 3, 4])"]},"metadata":{},"execution_count":59}],"source":["row_indices = [1, 2, 3]\n","A[row_indices]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z2Z9BAwvDflK","outputId":"f0b761e5-084b-49c7-f023-6a9228210f65"},"outputs":[{"data":{"text/plain":["array([[ 1,  2,  4],\n","       [11, 12, 14],\n","       [21, 22, 24],\n","       [31, 32, 34],\n","       [41, 42, 44]])"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["col_indices = [1, 2, -1] # вспомним, что -1 это последний элемент\n","A[:,col_indices]"]},{"cell_type":"markdown","metadata":{"id":"vg2oXc6cDflK"},"source":["Можно также использовать индексные маски: Если индексная маска представляет собой массив Numpy типа данных `bool`, то элемент выбирается (True) или нет (False) в зависимости от значения индексной маски в позиции каждого элемента:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oKgDnqSQDflK","outputId":"c07220a9-5e57-4e24-ff9b-6d506c42c7a0"},"outputs":[{"data":{"text/plain":["array([0, 1, 2, 3, 4])"]},"execution_count":134,"metadata":{},"output_type":"execute_result"}],"source":["B = array([n for n in range(5)])\n","B"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HimBugMjDflK","outputId":"d9a9f59c-31fd-45b7-8a63-750f5151cf69"},"outputs":[{"data":{"text/plain":["array([0, 2])"]},"execution_count":135,"metadata":{},"output_type":"execute_result"}],"source":["row_mask = array([True, False, True, False, False])\n","B[row_mask]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B60nY_NnDflK","outputId":"d1d418bd-ba99-4126-b342-9d487b280e0b"},"outputs":[{"data":{"text/plain":["array([0, 2])"]},"execution_count":136,"metadata":{},"output_type":"execute_result"}],"source":["# тот же результат\n","row_mask = array([1,0,1,0,0], dtype=bool)\n","B[row_mask]"]},{"cell_type":"markdown","metadata":{"id":"O2Vg13aQDflK"},"source":["Эта функция очень полезна для условного выбора элементов из массива, используя, например, операторы сравнения:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"--6Pu78KDflL","outputId":"43e1b589-f0b7-44a6-f6bd-e02a31740310"},"outputs":[{"data":{"text/plain":["array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. , 5.5, 6. ,\n","       6.5, 7. , 7.5, 8. , 8.5, 9. , 9.5])"]},"execution_count":137,"metadata":{},"output_type":"execute_result"}],"source":["x = arange(0, 10, 0.5)\n","x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FVq_jpv_DflL","outputId":"9dbfe8af-a4fb-428e-ffd2-8924e7db7238"},"outputs":[{"data":{"text/plain":["array([False, False, False, False, False, False, False, False, False,\n","       False, False,  True,  True,  True,  True, False, False, False,\n","       False, False])"]},"execution_count":138,"metadata":{},"output_type":"execute_result"}],"source":["mask = (5 < x) * (x < 7.5)\n","\n","mask"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"td-v-_TMDflL","outputId":"fd568c43-df27-4ba2-9ce8-6edaa6270d4d"},"outputs":[{"data":{"text/plain":["array([5.5, 6. , 6.5, 7. ])"]},"execution_count":139,"metadata":{},"output_type":"execute_result"}],"source":["x[mask]"]},{"cell_type":"markdown","metadata":{"id":"ciaX9DVoDflM"},"source":["### Задание 5\n","Используйте массив из задания 1 (таблицу умножения) извлеките из него при помощи маски все числа кратные 3. "]},{"cell_type":"code","source":["type(np.asarray(tabl))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0k98dxrqmrYd","executionInfo":{"status":"ok","timestamp":1663060481161,"user_tz":-180,"elapsed":336,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"1a1ed363-b978-4638-cf0c-4b1d7dd73ea6"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["np.ma.masked_array(tabl, tabl % 3 != 0)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VTG32TvJm_J4","executionInfo":{"status":"ok","timestamp":1663060487045,"user_tz":-180,"elapsed":486,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"d01a4592-b95b-42c7-8042-5ad863e0efbf"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["masked_array(\n","  data=[[--, --, 3, --, --, 6, --, --, 9],\n","        [--, --, 6, --, --, 12, --, --, 18],\n","        [3, 6, 9, 12, 15, 18, 21, 24, 27],\n","        [--, --, 12, --, --, 24, --, --, 36],\n","        [--, --, 15, --, --, 30, --, --, 45],\n","        [6, 12, 18, 24, 30, 36, 42, 48, 54],\n","        [--, --, 21, --, --, 42, --, --, 63],\n","        [--, --, 24, --, --, 48, --, --, 72],\n","        [9, 18, 27, 36, 45, 54, 63, 72, 81]],\n","  mask=[[ True,  True, False,  True,  True, False,  True,  True, False],\n","        [ True,  True, False,  True,  True, False,  True,  True, False],\n","        [False, False, False, False, False, False, False, False, False],\n","        [ True,  True, False,  True,  True, False,  True,  True, False],\n","        [ True,  True, False,  True,  True, False,  True,  True, False],\n","        [False, False, False, False, False, False, False, False, False],\n","        [ True,  True, False,  True,  True, False,  True,  True, False],\n","        [ True,  True, False,  True,  True, False,  True,  True, False],\n","        [False, False, False, False, False, False, False, False, False]],\n","  fill_value=999999)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["tabl[tabl % 3 == 0]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vn4hmd_IlbnA","executionInfo":{"status":"ok","timestamp":1663018114152,"user_tz":-180,"elapsed":277,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"6e73a2be-60e0-40fa-a082-b34e32a8109d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 3,  6,  9,  6, 12, 18,  3,  6,  9, 12, 15, 18, 21, 24, 27, 12, 24,\n","       36, 15, 30, 45,  6, 12, 18, 24, 30, 36, 42, 48, 54, 21, 42, 63, 24,\n","       48, 72,  9, 18, 27, 36, 45, 54, 63, 72, 81])"]},"metadata":{},"execution_count":84}]},{"cell_type":"markdown","metadata":{"id":"AS5bGpnsDflM"},"source":["## Функции для извлечения данных из массивов и создания массивов"]},{"cell_type":"markdown","metadata":{"id":"3y_qxSZKDflM"},"source":["### Функция where"]},{"cell_type":"markdown","metadata":{"id":"NwSG6TMoDflM"},"source":["Индексную маску можно превратить в список индексов, используя `where`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K7bLJ-I7DflM","outputId":"c752c209-3452-47f3-d0e2-43cd7413d53c"},"outputs":[{"data":{"text/plain":["(array([11, 12, 13, 14], dtype=int64),)"]},"execution_count":140,"metadata":{},"output_type":"execute_result"}],"source":["indices = where(mask)\n","\n","indices"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fFAFkGK2DflN","outputId":"38a019b2-7c2e-46ef-b034-cc987d83e419"},"outputs":[{"data":{"text/plain":["array([5.5, 6. , 6.5, 7. ])"]},"execution_count":141,"metadata":{},"output_type":"execute_result"}],"source":["x[indices] # действие этого списка эквивалентно маске, т.е. x[mask]"]},{"cell_type":"markdown","metadata":{"id":"gXIMBGZSDflN"},"source":["### Функция diag"]},{"cell_type":"markdown","metadata":{"id":"r1027RnVDflN"},"source":["При помощи функции diag можно извлекать диагональные элементы с главной и смещенных диагоналей:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gBi4W2VNDflN","outputId":"7f5c0b34-6ef0-4cca-9b59-dc06bdf96c05"},"outputs":[{"data":{"text/plain":["array([ 0, 11, 22, 33, 44])"]},"execution_count":142,"metadata":{},"output_type":"execute_result"}],"source":["diag(A)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e_jFSntIDflN","outputId":"280d6a3f-2d65-46ba-b5c1-da0a57ac6398"},"outputs":[{"data":{"text/plain":["array([10, 21, 32, 43])"]},"execution_count":143,"metadata":{},"output_type":"execute_result"}],"source":["diag(A, -1)"]},{"cell_type":"markdown","metadata":{"id":"_gAwkpndDflN"},"source":["### Функция take"]},{"cell_type":"markdown","metadata":{"id":"p4-wzjrDDflN"},"source":["Функция `take` подобна описанной выше необычной индексации:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gikxujh9DflO","outputId":"860b8963-6cd5-40e9-c028-d5dec99e16ad"},"outputs":[{"data":{"text/plain":["array([-3, -2, -1,  0,  1,  2])"]},"execution_count":144,"metadata":{},"output_type":"execute_result"}],"source":["v2 = arange(-3,3)\n","v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W388s2yeDflO","outputId":"a7bcf7f8-cb4e-4137-db68-60d7fc6d3d3b"},"outputs":[{"data":{"text/plain":["array([-2,  0,  2])"]},"execution_count":145,"metadata":{},"output_type":"execute_result"}],"source":["row_indices = [1, 3, 5]\n","v2[row_indices] # необычная индексация"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eiWNV2KzDflO","outputId":"446a210e-7bca-4c6d-cb31-6d486c2bd799"},"outputs":[{"data":{"text/plain":["array([-2,  0,  2])"]},"execution_count":146,"metadata":{},"output_type":"execute_result"}],"source":["v2.take(row_indices)"]},{"cell_type":"markdown","metadata":{"id":"wc3qHRRDDflO"},"source":["Но функция `take` так же работает на списках и других объектах:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jXLgDgxjDflO","outputId":"7d18d753-d2e1-4d1a-89fb-104fcef4eac8"},"outputs":[{"data":{"text/plain":["array([-2,  0,  2])"]},"execution_count":147,"metadata":{},"output_type":"execute_result"}],"source":["take([-3, -2, -1,  0,  1,  2], row_indices)"]},{"cell_type":"markdown","metadata":{"id":"f6MH9-PnDflO"},"source":["### Функция choose"]},{"cell_type":"markdown","metadata":{"id":"QK9FGwwaDflO"},"source":["Создает массив собирая элементы из нескольких массивов:"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"l2lJSN7VDflO","outputId":"e4f9fc91-2ee0-4766-c0fe-fa5e53eb71db","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663060774589,"user_tz":-180,"elapsed":714,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 5, -2,  5, -3])"]},"metadata":{},"execution_count":19}],"source":["which = [1, 0, 1, 0]\n","choices = [[-2,-2,-2,-3], [5,5,5,5]]\n","\n","choose(which, choices)"]},{"cell_type":"markdown","metadata":{"id":"XkqTrBJrDflP"},"source":["### Задание 7\n","Разбить массив таблицы умножения из задания 1 на два массива содержащие четные и нечетные значения, а затем собрать его в исходное состояние используя choose()"]},{"cell_type":"code","source":["chet = tabl[tabl % 2 == 0]"],"metadata":{"id":"RQP0Vfj9oTGu","executionInfo":{"status":"ok","timestamp":1663060625925,"user_tz":-180,"elapsed":286,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["nechet = tabl[tabl % 2 != 0]"],"metadata":{"id":"XUiDmvvooYe8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tabl_mask_1 = np.ma.masked_array(tabl, tabl % 2 == 0)\n","tabl_mask_2 = np.ma.masked_array(tabl, tabl % 2 != 0)\n","tabl[tabl_mask_1.mask], tabl[tabl_mask_2.mask]\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v0U6WmabofD2","executionInfo":{"status":"ok","timestamp":1663060508355,"user_tz":-180,"elapsed":283,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"2bfabd48-74d0-40cf-8f8a-fd76dcf4091a"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 2,  4,  6,  8,  2,  4,  6,  8, 10, 12, 14, 16, 18,  6, 12, 18, 24,\n","         4,  8, 12, 16, 20, 24, 28, 32, 36, 10, 20, 30, 40,  6, 12, 18, 24,\n","        30, 36, 42, 48, 54, 14, 28, 42, 56,  8, 16, 24, 32, 40, 48, 56, 64,\n","        72, 18, 36, 54, 72]),\n"," array([ 1,  3,  5,  7,  9,  3,  9, 15, 21, 27,  5, 15, 25, 35, 45,  7, 21,\n","        35, 49, 63,  9, 27, 45, 63, 81]))"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["choose(tabl_mask_1.mask, tabl_mask_2)"],"metadata":{"id":"0w2Xv63nr5Zy","executionInfo":{"status":"ok","timestamp":1663061549280,"user_tz":-180,"elapsed":282,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e19f741c-e55b-4be3-80ec-465ffc79aae2"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1,  4,  3,  8,  5, 12,  7, 16,  9],\n","       [ 2,  4,  6,  8, 10, 12, 14, 16, 18],\n","       [ 1,  4,  3,  8,  5, 12,  7, 16,  9],\n","       [ 2,  4,  6,  8, 10, 12, 14, 16, 18],\n","       [ 1,  4,  3,  8,  5, 12,  7, 16,  9],\n","       [ 2,  4,  6,  8, 10, 12, 14, 16, 18],\n","       [ 1,  4,  3,  8,  5, 12,  7, 16,  9],\n","       [ 2,  4,  6,  8, 10, 12, 14, 16, 18],\n","       [ 1,  4,  3,  8,  5, 12,  7, 16,  9]])"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":[],"metadata":{"id":"NXozS_LwMLyH","executionInfo":{"status":"ok","timestamp":1663063350027,"user_tz":-180,"elapsed":264,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":86,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"pbYlf1jtJ209","executionInfo":{"status":"ok","timestamp":1663061586457,"user_tz":-180,"elapsed":446,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":40,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Pjp3D93mDflP"},"source":["## Линейная алгебра"]},{"cell_type":"markdown","metadata":{"id":"Ef2CzJw2DflP"},"source":["Векторизация кода-это ключ к написанию эффективных численных вычислений с помощью Python / Numpy. Это означает, что максимально возможная часть программы должна быть сформулирована в терминах матричных и векторных операций, таких как матричного умножения."]},{"cell_type":"markdown","metadata":{"id":"5lAKAZ5BDflP"},"source":["### Операции между числами и векторами"]},{"cell_type":"markdown","metadata":{"id":"8mTz7hRgDflP"},"source":["Мы можем использовать обычные арифметические операторы для умножения, сложения, вычитания и деления массивов со скалярами или обычными числами."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9y-cbM_wDflP"},"outputs":[],"source":["v1 = arange(0, 5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jNriR6HaDflP","outputId":"2b731a20-58a0-498f-c748-80734f7f4042"},"outputs":[{"data":{"text/plain":["array([0, 2, 4, 6, 8])"]},"execution_count":150,"metadata":{},"output_type":"execute_result"}],"source":["v1 * 2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QR6_T5CeDflP","outputId":"35bbae5b-987f-4fb4-a07e-2879170fdaa9"},"outputs":[{"data":{"text/plain":["array([2, 3, 4, 5, 6])"]},"execution_count":151,"metadata":{},"output_type":"execute_result"}],"source":["v1 + 2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zraz4ilmDflP","outputId":"8e6bf5b6-46d0-40ec-a266-4e3f58cf0d44"},"outputs":[{"data":{"text/plain":["(array([[ 0,  2,  4,  6,  8],\n","        [20, 22, 24, 26, 28],\n","        [40, 42, 44, 46, 48],\n","        [60, 62, 64, 66, 68],\n","        [80, 82, 84, 86, 88]]),\n"," array([[ 2,  3,  4,  5,  6],\n","        [12, 13, 14, 15, 16],\n","        [22, 23, 24, 25, 26],\n","        [32, 33, 34, 35, 36],\n","        [42, 43, 44, 45, 46]]))"]},"execution_count":152,"metadata":{},"output_type":"execute_result"}],"source":["A * 2, A + 2"]},{"cell_type":"markdown","metadata":{"id":"KuArpkJNDflQ"},"source":["### Поэлементные операции между массивами"]},{"cell_type":"markdown","metadata":{"id":"4SMiu-fMDflQ"},"source":["Когда мы складываем, вычитаем, умножаем и делим массивы друг с другом, поведение по умолчанию-это операции **по элементам**, т.е. между элементами с совпадающими индексами:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iOH72esWDflQ","outputId":"40b08c6b-1c7a-49ef-cad3-0868635eb943"},"outputs":[{"data":{"text/plain":["array([[   0,    1,    4,    9,   16],\n","       [ 100,  121,  144,  169,  196],\n","       [ 400,  441,  484,  529,  576],\n","       [ 900,  961, 1024, 1089, 1156],\n","       [1600, 1681, 1764, 1849, 1936]])"]},"execution_count":153,"metadata":{},"output_type":"execute_result"}],"source":["A * A # поэлементное умножение"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4YYRqnD_DflQ","outputId":"9163b87b-d83e-493e-8c6a-5d51608407d7"},"outputs":[{"data":{"text/plain":["array([ 0,  1,  4,  9, 16])"]},"execution_count":154,"metadata":{},"output_type":"execute_result"}],"source":["v1 * v1"]},{"cell_type":"markdown","metadata":{"id":"RPbEnCoiDflQ"},"source":["Если мы умножим массивы с совместимыми размерами, то получим элементарное умножение каждой строки:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NgYqyNu3DflQ","outputId":"cf409000-d54a-43d9-8279-7a14a4257d61"},"outputs":[{"data":{"text/plain":["((5, 5), (5,))"]},"execution_count":155,"metadata":{},"output_type":"execute_result"}],"source":["A.shape, v1.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BkiihYcQDflQ","outputId":"5db4e890-16d2-4f51-e141-640e0fe7cdf2"},"outputs":[{"data":{"text/plain":["array([[  0,   1,   4,   9,  16],\n","       [  0,  11,  24,  39,  56],\n","       [  0,  21,  44,  69,  96],\n","       [  0,  31,  64,  99, 136],\n","       [  0,  41,  84, 129, 176]])"]},"execution_count":156,"metadata":{},"output_type":"execute_result"}],"source":["A * v1"]},{"cell_type":"markdown","metadata":{"id":"MGpeuGTcDflR"},"source":["### Алгебра матриц"]},{"cell_type":"markdown","metadata":{"id":"-SEm89KMDflR"},"source":["А как насчет умножения матриц? Есть два пути. Мы можем либо использовать функцию `dot`, которая применяет умножение матрица-матрица, матрица-вектор или скалярное векторное к своим двум аргументам:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CrOY-DU1DflR","outputId":"06f91df2-111d-4082-f4e4-bf4893dca4e5"},"outputs":[{"data":{"text/plain":["array([[ 300,  310,  320,  330,  340],\n","       [1300, 1360, 1420, 1480, 1540],\n","       [2300, 2410, 2520, 2630, 2740],\n","       [3300, 3460, 3620, 3780, 3940],\n","       [4300, 4510, 4720, 4930, 5140]])"]},"execution_count":157,"metadata":{},"output_type":"execute_result"}],"source":["dot(A, A)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PJKqYGFyDflR","outputId":"35fcdace-d25e-4727-f7fe-375f98115818"},"outputs":[{"data":{"text/plain":["array([ 30, 130, 230, 330, 430])"]},"execution_count":158,"metadata":{},"output_type":"execute_result"}],"source":["dot(A, v1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DvpMV3DNDflR","outputId":"a989419d-8f38-4cab-99c8-f52fa981a707"},"outputs":[{"data":{"text/plain":["30"]},"execution_count":159,"metadata":{},"output_type":"execute_result"}],"source":["dot(v1, v1)"]},{"cell_type":"markdown","metadata":{"id":"B7Lsc5cGDflR"},"source":["В качестве альтернативы мы можем привести объекты типа массива к типу `matrix`. Это изменяет поведение стандартных арифметических операторов `+, -, *` для использования алгебры матриц."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9JJse-3VDflR"},"outputs":[],"source":["M = matrix(A)\n","v = matrix(v1).T # транспонирует массив в вектор столбец"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5v_I-GGyDflR","outputId":"53642503-cc38-4aaa-9ba4-2ff6883164ba"},"outputs":[{"data":{"text/plain":["matrix([[0],\n","        [1],\n","        [2],\n","        [3],\n","        [4]])"]},"execution_count":161,"metadata":{},"output_type":"execute_result"}],"source":["v"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BhUIypOTDflS","outputId":"7026ee3a-9583-4b63-cff1-265ec73d1df8"},"outputs":[{"data":{"text/plain":["matrix([[ 300,  310,  320,  330,  340],\n","        [1300, 1360, 1420, 1480, 1540],\n","        [2300, 2410, 2520, 2630, 2740],\n","        [3300, 3460, 3620, 3780, 3940],\n","        [4300, 4510, 4720, 4930, 5140]])"]},"execution_count":162,"metadata":{},"output_type":"execute_result"}],"source":["M * M"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OJh8YlL3DflS","outputId":"427b62f3-ba31-44d8-ab0b-0a64178bde1a"},"outputs":[{"data":{"text/plain":["matrix([[ 30],\n","        [130],\n","        [230],\n","        [330],\n","        [430]])"]},"execution_count":163,"metadata":{},"output_type":"execute_result"}],"source":["M * v"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pie-YfJHDflS","outputId":"53ec644d-2df3-45c7-dc6b-d223bd69c880"},"outputs":[{"data":{"text/plain":["matrix([[30]])"]},"execution_count":164,"metadata":{},"output_type":"execute_result"}],"source":["# скалярное произведение\n","v.T * v"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VJt8it7IDflS","outputId":"89abc1c4-2de0-4c80-a001-d971dda07636"},"outputs":[{"data":{"text/plain":["matrix([[ 30],\n","        [131],\n","        [232],\n","        [333],\n","        [434]])"]},"execution_count":165,"metadata":{},"output_type":"execute_result"}],"source":["# с объектами типа matrix работают все операции\n","v + M*v"]},{"cell_type":"markdown","metadata":{"id":"PkzskUy6DflS"},"source":["Если использовать операции `+, -, *` с несовместимыми объектами будет выброс исключения или ошибки"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dSqGW7afDflS"},"outputs":[],"source":["v = matrix([1,2,3,4,5]).T"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3sphO41RDflS","outputId":"c071c5aa-81d6-4ebb-db15-3e1595ccce0f"},"outputs":[{"data":{"text/plain":["((5, 5), (5, 1))"]},"execution_count":167,"metadata":{},"output_type":"execute_result"}],"source":["shape(M), shape(v)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"le0KGdJ1DflT","outputId":"64bb8a9c-b96f-4a23-9f56-f969975d6646"},"outputs":[{"data":{"text/plain":["matrix([[ 40],\n","        [190],\n","        [340],\n","        [490],\n","        [640]])"]},"execution_count":168,"metadata":{},"output_type":"execute_result"}],"source":["M * v"]},{"cell_type":"markdown","metadata":{"id":"RraXqDocDflT"},"source":["Посмотрите также другие подобные функции: `inner`, `outer`, `cross`, `kron`, `tensordot`. Попробуйте набрать `help(kron)`."]},{"cell_type":"markdown","metadata":{"id":"_PTZB02wDflT"},"source":["### Преобразования массив/матрица"]},{"cell_type":"markdown","metadata":{"id":"KJzbhMm7DflT"},"source":["Выше мы уже использовали `.T` для транспонирования матричного объекта `v`. Мы также могли бы использовать функцию `transpose` для выполнения того же самого.\n","\n","Другими математическими функциями, преобразующими матричные объекты, являются:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WbL9v5KBDflT","outputId":"535059be-8a70-4c22-e804-7bd339addfe6"},"outputs":[{"data":{"text/plain":["matrix([[0.+1.j, 0.+2.j],\n","        [0.+3.j, 0.+4.j]])"]},"execution_count":169,"metadata":{},"output_type":"execute_result"}],"source":["C = matrix([[1j, 2j], [3j, 4j]])\n","C"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DRUkDA8jDflT","outputId":"7c21f43c-4075-4a0c-ee4a-e6af77a810c7"},"outputs":[{"data":{"text/plain":["matrix([[0.-1.j, 0.-2.j],\n","        [0.-3.j, 0.-4.j]])"]},"execution_count":170,"metadata":{},"output_type":"execute_result"}],"source":["conjugate(C)"]},{"cell_type":"markdown","metadata":{"id":"8NoKJcjlDflT"},"source":["Эрмитово сопряжение: `transpose + conjugate`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7sxO2cdZDflU","outputId":"ca1347fb-54dc-4e02-aeae-bddd572fae9b"},"outputs":[{"data":{"text/plain":["matrix([[0.-1.j, 0.-3.j],\n","        [0.-2.j, 0.-4.j]])"]},"execution_count":171,"metadata":{},"output_type":"execute_result"}],"source":["C.H"]},{"cell_type":"markdown","metadata":{"id":"EAwjPzQ8DflU"},"source":["Можно извлекать действительную и мнимую часть комплексного объекта, используя `real` и `imag`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W-2_HQRDDflU","outputId":"811b623f-9806-4afe-d8b4-419bd9505fe1"},"outputs":[{"data":{"text/plain":["matrix([[0., 0.],\n","        [0., 0.]])"]},"execution_count":172,"metadata":{},"output_type":"execute_result"}],"source":["real(C) # то же, что и: C.real"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nudGac_dDflU","outputId":"0e39c4e5-ff02-422a-f321-ff6ea5f6b4a6"},"outputs":[{"data":{"text/plain":["matrix([[1., 2.],\n","        [3., 4.]])"]},"execution_count":173,"metadata":{},"output_type":"execute_result"}],"source":["imag(C) # то же, что и: C.imag"]},{"cell_type":"markdown","metadata":{"id":"nhzPFOPKDflU"},"source":["Или комплексный аргумент(угол) и модуль"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6B_zQrj8DflU","outputId":"39760c93-0fed-4b05-ce0e-39b5d9ab95fa"},"outputs":[{"data":{"text/plain":["matrix([[0.78539816, 1.10714872],\n","        [1.24904577, 1.32581766]])"]},"execution_count":174,"metadata":{},"output_type":"execute_result"}],"source":["angle(C+1) # для пользователей MATLAB, angle используется вместо arg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zd7w2Uc-DflU","outputId":"e30c5c69-ffac-494c-fa84-14a943c8c81c"},"outputs":[{"data":{"text/plain":["matrix([[1., 2.],\n","        [3., 4.]])"]},"execution_count":175,"metadata":{},"output_type":"execute_result"}],"source":["abs(C)"]},{"cell_type":"markdown","metadata":{"id":"7L-2BhrgDflV"},"source":["### Задание 8\n","Даны вектора v1(0,1,2,3,4) v2(5,6,7,8,9) найти угол между ними, учитывая что косинус угла между векторами можно найти как отношения их скалярного произведения к их длинам."]},{"cell_type":"code","source":["v1 = np.array((0,1,2,3,4) )\n","v2 = np.array((5,6,7,8,9))\n","ang = sum(v1 * v2) / (sqrt(sum(v1**2)) * sqrt(sum(v2**2)))\n"],"metadata":{"id":"8ffQlreHuTyH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["(math.degrees(ang))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tJ1PcNCox9CA","executionInfo":{"status":"ok","timestamp":1663021308416,"user_tz":-180,"elapsed":296,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"3cf71c66-8156-45ce-d563-bcd7ef71aec5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["52.4061073126974"]},"metadata":{},"execution_count":171}]},{"cell_type":"markdown","metadata":{"id":"ld0IO5mSDflV"},"source":["### Вычисления над матрицами"]},{"cell_type":"markdown","metadata":{"id":"MGT55z8lDflV"},"source":["#### Функция Inv - инверсия"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2qiuNWvzDflV","outputId":"2e3d4fbc-ec76-4ee3-e8e9-ffa59472f414"},"outputs":[{"data":{"text/plain":["matrix([[0.+2.j , 0.-1.j ],\n","        [0.-1.5j, 0.+0.5j]])"]},"execution_count":176,"metadata":{},"output_type":"execute_result"}],"source":["linalg.inv(C) # эквивалентно C.I "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"koXeutVWDflV","outputId":"2b87fc08-1d23-4d34-92b7-c7d27be759b2"},"outputs":[{"data":{"text/plain":["matrix([[1.0000000e+00+0.j, 8.8817842e-16+0.j],\n","        [0.0000000e+00+0.j, 1.0000000e+00+0.j]])"]},"execution_count":177,"metadata":{},"output_type":"execute_result"}],"source":["C.I * C"]},{"cell_type":"markdown","metadata":{"id":"70Sf2Sq0DflV"},"source":["#### Функция det - детерминант"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mhUBJvtgDflV","outputId":"75c10cd6-4f79-4ee7-f66c-f22dc77f065e"},"outputs":[{"data":{"text/plain":["(2.0000000000000004+0j)"]},"execution_count":178,"metadata":{},"output_type":"execute_result"}],"source":["linalg.det(C)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WVwgBELkDflW","outputId":"4a2693e0-ff97-4798-d97a-8ed30e85e01c"},"outputs":[{"data":{"text/plain":["(0.5+0j)"]},"execution_count":179,"metadata":{},"output_type":"execute_result"}],"source":["linalg.det(C.I)"]},{"cell_type":"markdown","metadata":{"id":"glb9NUUiDflW"},"source":["### Задача 9\n","Создайте две матрицы размером (5,5). Одна матрица содержит 5 в шахматном порядке как в задаче домашнего задания, другая имеет треугольную форму содержающую 5 на основной диагонали и в позициях выше ее, а ниже все 0. Посчитайте их детерминант и найдите обратные матрицы. Если для матрицы не у дается найти обратную, видимо этому мешает нулевое значение детерминанта."]},{"cell_type":"code","source":["d = zeros((5,5))\n","for i in range(5):\n","  d += diag([5] * (5-i), i)\n","d"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qrJ53rskSW0C","executionInfo":{"status":"ok","timestamp":1663063220960,"user_tz":-180,"elapsed":12,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"64f75326-6571-48c0-94a1-81e460f9a36b"},"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[5., 5., 5., 5., 5.],\n","       [0., 5., 5., 5., 5.],\n","       [0., 0., 5., 5., 5.],\n","       [0., 0., 0., 5., 5.],\n","       [0., 0., 0., 0., 5.]])"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["diag([5], k = 4) + diag([5,5,5], k = 2) + diag([5,5,5,5,5], k = 0) + diag([5], k = -4) + diag([5,5,5], k = -2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T0OhrEpxz9XZ","executionInfo":{"status":"ok","timestamp":1663062979148,"user_tz":-180,"elapsed":263,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"af07d299-1da5-4942-db50-b202a389b53a"},"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[5, 0, 5, 0, 5],\n","       [0, 5, 0, 5, 0],\n","       [5, 0, 5, 0, 5],\n","       [0, 5, 0, 5, 0],\n","       [5, 0, 5, 0, 5]])"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["# diag([5,5,5,5,5],0) + diag([5,5,5,5],1) + diag([5,5,5,],2)"],"metadata":{"id":"vKAbS7XXNVdz","executionInfo":{"status":"ok","timestamp":1663063331829,"user_tz":-180,"elapsed":440,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":86,"outputs":[]},{"cell_type":"code","source":["d = diag([0]*5,0)\n","for i in range(0,6,2):\n","  d += diag([5] * (5-i),i)\n","d"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZxqM1cqyNc1w","executionInfo":{"status":"ok","timestamp":1663064214992,"user_tz":-180,"elapsed":1641,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"f16098cb-03d4-4bc5-ce14-cfdab4974745"},"execution_count":91,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[5, 0, 5, 0, 5],\n","       [0, 5, 0, 5, 0],\n","       [0, 0, 5, 0, 5],\n","       [0, 0, 0, 5, 0],\n","       [0, 0, 0, 0, 5]])"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":["np.flip(d) - diag([5]*5,0) + d"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZQkhCO70W9ue","executionInfo":{"status":"ok","timestamp":1663064394266,"user_tz":-180,"elapsed":393,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"e186c6c1-9ca2-4e51-f669-d73fadfa9209"},"execution_count":97,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[5, 0, 5, 0, 5],\n","       [0, 5, 0, 5, 0],\n","       [5, 0, 5, 0, 5],\n","       [0, 5, 0, 5, 0],\n","       [5, 0, 5, 0, 5]])"]},"metadata":{},"execution_count":97}]},{"cell_type":"markdown","metadata":{"id":"GPkrNKtzDflW"},"source":["### Обработка данных"]},{"cell_type":"markdown","metadata":{"id":"FdROi-PZDflW"},"source":["Часто бывает полезно хранить наборы данных в массивах Numpy. Numpy предоставляет ряд функций для вычисления статистики наборов данных в массивах.\n","\n","Например, давайте рассчитаем некоторые свойства из набора данных температуры Стокгольма, использованного выше."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9CUcFCJlDflX","outputId":"82b268f5-0613-4cce-c8d1-4e23af84cf7a"},"outputs":[{"data":{"text/plain":["(77431, 7)"]},"execution_count":180,"metadata":{},"output_type":"execute_result"}],"source":["# напоминаем в переменной data храняться данные температуры в Стокгольме\n","data.shape"]},{"cell_type":"markdown","metadata":{"id":"a-hWEq37DflX"},"source":["#### Функция mean"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a2BUOyH5DflX","outputId":"93eec3fd-97ae-49a1-eb24-34d0f41f6a5b"},"outputs":[{"data":{"text/plain":["6.197109684751585"]},"execution_count":181,"metadata":{},"output_type":"execute_result"}],"source":["# the temperature data is in column 3\n","mean(data[:,3])"]},{"cell_type":"markdown","metadata":{"id":"GcoCHAJzDflX"},"source":["Средняя дневная температура в Стокгольме за последние 200 лет 6.2 C."]},{"cell_type":"markdown","metadata":{"id":"-xe6hL1hDflX"},"source":["#### Функции стандартного отклонения и дисперсии"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MNDsaROiDflX","outputId":"4e971e18-3b1a-4ef9-ab49-038db1d6c2b4"},"outputs":[{"data":{"text/plain":["(8.282271621340573, 68.59602320966341)"]},"execution_count":182,"metadata":{},"output_type":"execute_result"}],"source":["std(data[:,3]), var(data[:,3])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QKStuT4cDflX"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"SZCTiRSPDflX"},"source":["#### Функции min и max"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zvN7Jq6WDflY","outputId":"bdaa04ea-0a83-40d1-9d5e-580160bc576a"},"outputs":[{"data":{"text/plain":["-25.8"]},"execution_count":183,"metadata":{},"output_type":"execute_result"}],"source":["# минимальная температура\n","data[:,3].min()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m6j1Xi4WDflY","outputId":"9076c201-5790-467e-b205-89c805ff825f"},"outputs":[{"data":{"text/plain":["28.3"]},"execution_count":184,"metadata":{},"output_type":"execute_result"}],"source":["# максимальная температура\n","data[:,3].max()"]},{"cell_type":"markdown","metadata":{"id":"R18fMUbUDflY"},"source":["#### Функции sum, prod и trace"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7ncDuBNvDflY","outputId":"5f41390f-4ee9-4cf1-ec32-bf939b4060e2"},"outputs":[{"data":{"text/plain":["array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]},"execution_count":185,"metadata":{},"output_type":"execute_result"}],"source":["d = arange(0, 10)\n","d"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ISyuX9xaDflY","outputId":"a6f1775c-8dd4-424c-dbea-fcdbfd6f7a4a"},"outputs":[{"data":{"text/plain":["45"]},"execution_count":186,"metadata":{},"output_type":"execute_result"}],"source":["# сумма всех элементов\n","sum(d)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vXpUeCMtDflY","outputId":"031a002a-2d48-4c97-83d1-6ab68ba50981"},"outputs":[{"data":{"text/plain":["3628800"]},"execution_count":187,"metadata":{},"output_type":"execute_result"}],"source":["# произведение всех элементов\n","prod(d+1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i7GVnr6TDflY","outputId":"16723169-1faf-4c98-820f-a17a995b2002"},"outputs":[{"data":{"text/plain":["array([ 0,  1,  3,  6, 10, 15, 21, 28, 36, 45], dtype=int32)"]},"execution_count":188,"metadata":{},"output_type":"execute_result"}],"source":["# совокупная сумма\n","cumsum(d)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-FH0Z5E3DflY","outputId":"f9edc973-05f9-44b1-de72-ca54fb5c3550"},"outputs":[{"data":{"text/plain":["array([      1,       2,       6,      24,     120,     720,    5040,\n","         40320,  362880, 3628800], dtype=int32)"]},"execution_count":189,"metadata":{},"output_type":"execute_result"}],"source":["# совокупное произведение\n","cumprod(d+1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xRaa_xYnDflY","outputId":"a77df015-8cdd-4099-e0e9-6d7a3e3a6744"},"outputs":[{"data":{"text/plain":["110"]},"execution_count":190,"metadata":{},"output_type":"execute_result"}],"source":["# тоже что и: diag(A).sum()\n","trace(A)"]},{"cell_type":"markdown","metadata":{"id":"0exi1oDaDflZ"},"source":["### Вычисления на подмножествах массива"]},{"cell_type":"markdown","metadata":{"id":"McrRy7e3DflZ"},"source":["Можно выполнять вычисления на подмножествах используя индексирование, необычное индексирование и другие методы извлечения данных из массива.\n","\n","Рассмотрим данные массива температур в Стокгольме:"]},{"cell_type":"markdown","metadata":{"id":"MU9en3xXDflZ"},"source":["Формат данных: год, месяц, день, дневная средняя температура, самая низкая, самая высокая, местность.\n","\n","Если необходимо извлечь среднюю температуру в какой-то конкретный месяц, например февраль, тогда нужно создать маску индексов и использовать ее для извлечения данных только за этот месяц:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XtT_AdlmDflZ","outputId":"03a41129-0b18-41eb-c113-10dc21d33636"},"outputs":[{"data":{"text/plain":["array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12.])"]},"execution_count":191,"metadata":{},"output_type":"execute_result"}],"source":["unique(data[:,1]) # столбик месяцев от 1 до 12"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnUBXtMlDflZ"},"outputs":[],"source":["mask_feb = data[:,1] == 2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YkNyudjrDflZ","outputId":"3a080cfe-2430-43c4-92bb-42106c088aa3"},"outputs":[{"data":{"text/plain":["-3.212109570736596"]},"execution_count":193,"metadata":{},"output_type":"execute_result"}],"source":["# температурные данные в столбике 3\n","mean(data[mask_feb,3])"]},{"cell_type":"markdown","metadata":{"id":"M6M90czGDflZ"},"source":["С этими интструментами открываются широкие возможности для обработки данных. Например, чтобы извлечь среднюю температуру за месяц по всем месяцам достаточно несколько строк кода:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LmhCddZUDflZ","outputId":"5a2bc930-a02a-4776-cac7-241e7a6b6c5f"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["months = arange(1,13)\n","monthly_mean = [mean(data[data[:,1] == month, 3]) for month in months]\n","\n","fig, ax = plt.subplots()\n","ax.bar(months, monthly_mean)\n","ax.set_xlabel(\"Month\")\n","ax.set_ylabel(\"Monthly avg. temp.\");"]},{"cell_type":"markdown","metadata":{"id":"xGbF9Y_jDflZ"},"source":["### Вычисления с данными высокой размерности"]},{"cell_type":"markdown","metadata":{"id":"-Z74S_yFDfla"},"source":["Когда функции, такие как `min`, `max` и т. д. применяются к многомерным массивам, иногда полезно применять расчет ко всему массиву, а иногда только на основе строки или столбца. Используя аргумент `axis`, мы можем указать, как должны вести себя эти функции:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"97B4szhLDfla","outputId":"c04a2e20-c606-4e14-80d3-4a0ba8674a8a"},"outputs":[{"data":{"text/plain":["array([[0.86270493, 0.96981009, 0.96959743],\n","       [0.35425871, 0.52085563, 0.48726959],\n","       [0.61650805, 0.05690313, 0.1292265 ]])"]},"execution_count":195,"metadata":{},"output_type":"execute_result"}],"source":["m = random.rand(3,3)\n","m"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KcDPWYk5Dfla","outputId":"94fa7f40-5a93-4afb-aa2f-de7951f3bd5c"},"outputs":[{"data":{"text/plain":["0.9698100908575067"]},"execution_count":196,"metadata":{},"output_type":"execute_result"}],"source":["# максимум по массиву\n","m.max()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3uH8AL_uDfla","outputId":"f2ddab79-aec5-4f3a-b5e0-874c47190c5e"},"outputs":[{"data":{"text/plain":["array([0.86270493, 0.96981009, 0.96959743])"]},"execution_count":197,"metadata":{},"output_type":"execute_result"}],"source":["# максимумы по каждому столбцу\n","m.max(axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Juk1vCpTDfla","outputId":"2e834ad1-0a1e-4cb8-91c8-8a109da24720"},"outputs":[{"data":{"text/plain":["array([0.96981009, 0.52085563, 0.61650805])"]},"execution_count":198,"metadata":{},"output_type":"execute_result"}],"source":["# максимумы по каждой строке\n","m.max(axis=1)"]},{"cell_type":"markdown","metadata":{"id":"ioFlrL2kDfla"},"source":["Многие другие функции и методы в классах `array` и `matrix` принимают один и тот же (необязательный) аргумент ключевого слова `axis`."]},{"cell_type":"markdown","metadata":{"id":"L-M6344RDfla"},"source":["## Преобразования формы, размера и соединение массивов"]},{"cell_type":"markdown","metadata":{"id":"69rw12O3Dfla"},"source":["Форма массива Numpy может быть изменена без копирования базовых данных, что делает его быстрой операцией даже для больших массивов."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0tuKiwEgDfla","outputId":"809597ef-b2c7-4d4f-8e80-dab6bd7965a6"},"outputs":[{"data":{"text/plain":["array([[ 0,  1,  2,  3,  4],\n","       [10, 11, 12, 13, 14],\n","       [20, 21, 22, 23, 24],\n","       [30, 31, 32, 33, 34],\n","       [40, 41, 42, 43, 44]])"]},"execution_count":199,"metadata":{},"output_type":"execute_result"}],"source":["A"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"15cXQbGSDfla"},"outputs":[],"source":["n, m = A.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NxXvlHevDflb","outputId":"06c76c64-7870-44d6-efe1-7dd50a75f59e"},"outputs":[{"data":{"text/plain":["array([[ 0,  1,  2,  3,  4, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 30,\n","        31, 32, 33, 34, 40, 41, 42, 43, 44]])"]},"execution_count":201,"metadata":{},"output_type":"execute_result"}],"source":["B = A.reshape((1,n*m))\n","B"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vRxwkRBPDflb","outputId":"73606f06-9e1b-4158-d062-4e989346ceee"},"outputs":[{"data":{"text/plain":["array([[ 5,  5,  5,  5,  5, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 30,\n","        31, 32, 33, 34, 40, 41, 42, 43, 44]])"]},"execution_count":202,"metadata":{},"output_type":"execute_result"}],"source":["B[0,0:5] = 5 # изменим массив\n","\n","B"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"G9i2fEoIDflb","outputId":"289955ad-0441-4fb7-cd87-66122dad4b32"},"outputs":[{"data":{"text/plain":["array([[ 5,  5,  5,  5,  5],\n","       [10, 11, 12, 13, 14],\n","       [20, 21, 22, 23, 24],\n","       [30, 31, 32, 33, 34],\n","       [40, 41, 42, 43, 44]])"]},"execution_count":203,"metadata":{},"output_type":"execute_result"}],"source":["A # и оригинальные данные тоже изменятся. A и B это ссылки на одни и теже данные"]},{"cell_type":"markdown","metadata":{"id":"cxiZ81xbDflb"},"source":["Мы также можем использовать функцию `flatten`, чтобы превратить массив более высоких измерений в вектор. Но эта функция создает копию данных."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9HTnN-9vDflb","outputId":"9d79ea13-ff1b-4611-e00d-4db3ea0a22e1"},"outputs":[{"data":{"text/plain":["array([ 5,  5,  5,  5,  5, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 30, 31,\n","       32, 33, 34, 40, 41, 42, 43, 44])"]},"execution_count":204,"metadata":{},"output_type":"execute_result"}],"source":["B = A.flatten()\n","\n","B"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c8bryesIDflb","outputId":"285d0e47-faae-4f9a-e64d-a9890c88ae2f"},"outputs":[{"data":{"text/plain":["array([10, 10, 10, 10, 10, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 30, 31,\n","       32, 33, 34, 40, 41, 42, 43, 44])"]},"execution_count":205,"metadata":{},"output_type":"execute_result"}],"source":["B[0:5] = 10\n","\n","B"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f5z1C_VLDflb","outputId":"11d42890-67ad-4310-c5da-acfa5c5e8d52"},"outputs":[{"data":{"text/plain":["array([[ 5,  5,  5,  5,  5],\n","       [10, 11, 12, 13, 14],\n","       [20, 21, 22, 23, 24],\n","       [30, 31, 32, 33, 34],\n","       [40, 41, 42, 43, 44]])"]},"execution_count":206,"metadata":{},"output_type":"execute_result"}],"source":["A # теперь A неизменилась, поскольку данные B это копия A, теперь B не ссылается на те же данные."]},{"cell_type":"markdown","metadata":{"id":"dzOQPrrRDflb"},"source":["## Дополнение новых размерностей: newaxis"]},{"cell_type":"markdown","metadata":{"id":"iKux4k9nDflb"},"source":["С `newaxis`, можно добавить новые размерности в массив. Например, превратить вектор в матрицу:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4B5gYU_LDflb"},"outputs":[],"source":["v = array([1,2,3])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cKJ05dslDflc","outputId":"c39c97c9-78c3-45b9-8099-b420f7681ea8"},"outputs":[{"data":{"text/plain":["(3,)"]},"execution_count":208,"metadata":{},"output_type":"execute_result"}],"source":["shape(v)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ggeJLTT0Dflc","outputId":"e42e1da2-8809-4109-d0d5-96fc2becfa54"},"outputs":[{"data":{"text/plain":["array([[1],\n","       [2],\n","       [3]])"]},"execution_count":209,"metadata":{},"output_type":"execute_result"}],"source":["# создание столбца матрицы из вектора v\n","v[:, newaxis]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RGWXbyCmDflc","outputId":"2cb3dc64-0261-4602-9475-00b93b4de7c0"},"outputs":[{"data":{"text/plain":["(3, 1)"]},"execution_count":210,"metadata":{},"output_type":"execute_result"}],"source":["# столбец матрицы\n","v[:,newaxis].shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"onZTrKrrDflc","outputId":"3b4a445b-2e10-4dff-e07d-115ac39d94e9"},"outputs":[{"data":{"text/plain":["(1, 3)"]},"execution_count":211,"metadata":{},"output_type":"execute_result"}],"source":["# строка матрицы\n","v[newaxis,:].shape"]},{"cell_type":"markdown","metadata":{"id":"-A9EqUShDflc"},"source":["## Соединение и повторение массивов"]},{"cell_type":"markdown","metadata":{"id":"O1wJz0ZWDflc"},"source":["Используя функции `repeat`, `tile`, `vstack`, `hstack` и `concatenate` мы можем создать больше векторов и матриц из более мелких:"]},{"cell_type":"markdown","metadata":{"id":"HpFPMh_TDflc"},"source":["### `tile` и `repeat`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dPOruUeDDflc"},"outputs":[],"source":["a = array([[1, 2], [3, 4]])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6DMdfxgxDflc","outputId":"4a0b506e-0976-4ac4-b4fe-e40814c7f362"},"outputs":[{"data":{"text/plain":["array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4])"]},"execution_count":213,"metadata":{},"output_type":"execute_result"}],"source":["# повторить каждый элемент 3 раза\n","repeat(a, 3)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tVj_0TfIDflc","outputId":"f3b6fa31-fa5c-4f54-91f4-1e6a5ae926d5"},"outputs":[{"data":{"text/plain":["array([[1, 2, 1, 2, 1, 2],\n","       [3, 4, 3, 4, 3, 4]])"]},"execution_count":214,"metadata":{},"output_type":"execute_result"}],"source":["# повторить матрицу 3 раза \n","tile(a, 3)"]},{"cell_type":"markdown","metadata":{"id":"UTmk5hgHDfld"},"source":["### `concatenate`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f86W4EdPDfld"},"outputs":[],"source":["b = array([[5, 6]])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S3RqfbyyDfld","outputId":"49b390fc-b263-41a8-c8d9-3970c0abcb96"},"outputs":[{"data":{"text/plain":["array([[1, 2],\n","       [3, 4],\n","       [5, 6]])"]},"execution_count":216,"metadata":{},"output_type":"execute_result"}],"source":["concatenate((a, b), axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VgGhCGVYDfld","outputId":"f850215c-7fe0-4f05-f926-036eb5f84290"},"outputs":[{"data":{"text/plain":["array([[1, 2, 5],\n","       [3, 4, 6]])"]},"execution_count":217,"metadata":{},"output_type":"execute_result"}],"source":["concatenate((a, b.T), axis=1)"]},{"cell_type":"markdown","metadata":{"id":"sTK_uczrDfld"},"source":["### `hstack` и `vstack`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Cd4LRIA7Dfld","outputId":"f2081ebd-bd8d-4f34-d78f-22214e54e86c"},"outputs":[{"data":{"text/plain":["array([[1, 2],\n","       [3, 4],\n","       [5, 6]])"]},"execution_count":218,"metadata":{},"output_type":"execute_result"}],"source":["vstack((a,b))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KXfxmFKxDfld","outputId":"6f0839b6-1d11-4195-fa57-9740cbcd6766"},"outputs":[{"data":{"text/plain":["array([[1, 2, 5],\n","       [3, 4, 6]])"]},"execution_count":219,"metadata":{},"output_type":"execute_result"}],"source":["hstack((a,b.T))"]},{"cell_type":"markdown","metadata":{"id":"aRHfDP1YDfld"},"source":["## Копия и \"глубокая копия\""]},{"cell_type":"markdown","metadata":{"id":"JBGBMvRPDfld"},"source":["Для достижения высокой производительности назначения в Python обычно не копируют базовые объекты. Это важно, например, когда объекты передаются между функциями, чтобы избежать чрезмерного объема копирования памяти, когда это не является необходимым (технический термин: пропуск по ссылке)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GGeduc90Dfld","outputId":"7a2bed3e-add2-4d9a-fee0-88db8cd3bbaf"},"outputs":[{"data":{"text/plain":["array([[1, 2],\n","       [3, 4]])"]},"execution_count":220,"metadata":{},"output_type":"execute_result"}],"source":["A = array([[1, 2], [3, 4]])\n","\n","A"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8Y9WqQGnDfle"},"outputs":[],"source":["# теперь В ссылается натеже данные, что и А \n","B = A "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mSTyeQDrDfle","outputId":"85754aa0-a9dd-4673-afc1-1f9b7fe319e1"},"outputs":[{"data":{"text/plain":["array([[10,  2],\n","       [ 3,  4]])"]},"execution_count":222,"metadata":{},"output_type":"execute_result"}],"source":["# изменения B отражаются в A\n","B[0,0] = 10\n","\n","B"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BhNU1SRhDfle","outputId":"6130fd04-9448-4695-a6d2-8f882f3c332a"},"outputs":[{"data":{"text/plain":["array([[10,  2],\n","       [ 3,  4]])"]},"execution_count":223,"metadata":{},"output_type":"execute_result"}],"source":["A"]},{"cell_type":"markdown","metadata":{"id":"KWWTlkRMDfle"},"source":["Если мы хотим избежать такого поведения, чтобы при получении нового полностью независимого объекта `B`, скопированного из `A`, нам нужно было сделать так называемое \"глубокое копирование\" с помощью функции `copy`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5CTH7iTDDfle"},"outputs":[],"source":["B = copy(A)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z4d69LbXDfle","outputId":"a88ecdc9-d4bd-4236-9060-027000736982"},"outputs":[{"data":{"text/plain":["array([[10,  2],\n","       [ 3,  4]])"]},"execution_count":225,"metadata":{},"output_type":"execute_result"}],"source":["# теперь при изменении В, А не меняется\n","\n","B"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M0tUifwDDfle","outputId":"906f0d81-a2dd-42c3-d69d-03963c8cb83c"},"outputs":[{"data":{"text/plain":["array([[10,  2],\n","       [ 3,  4]])"]},"execution_count":226,"metadata":{},"output_type":"execute_result"}],"source":["A"]},{"cell_type":"markdown","metadata":{"id":"CStW1BKtDfle"},"source":["## Иттерация на элементах массива"]},{"cell_type":"markdown","metadata":{"id":"JYa4aM9sDfle"},"source":["Как правило, мы хотим избежать повторения элементов массивов всякий раз, когда это возможно (любой ценой). Причина в том, что в интерпретируемом языке, таком как Python (или MATLAB), итерации действительно медленны по сравнению с векторизованными операциями.\n","\n","Однако, иногда итерации неизбежны. Для таких случаев цикл Python `for` является наиболее удобным способом перебора массива:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HOw5_AeNDfle","outputId":"c59979a5-38eb-41aa-af70-29d6839079df"},"outputs":[{"name":"stdout","output_type":"stream","text":["1\n","2\n","3\n","4\n"]}],"source":["v = array([1,2,3,4])\n","\n","for element in v:\n","    print(element)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"otogaU5cDflf","outputId":"e3ea1449-757f-4c41-d151-4c5b74d20abd"},"outputs":[{"name":"stdout","output_type":"stream","text":["row [1 2]\n","1\n","2\n","row [3 4]\n","3\n","4\n"]}],"source":["M = array([[1,2], [3,4]])\n","\n","for row in M:\n","    print(\"row\", row)\n","    \n","    for element in row:\n","        print(element)"]},{"cell_type":"markdown","metadata":{"id":"q7YuvlNVDflf"},"source":["Когда нам нужно перебирать каждый элемент массива и изменять его элементы, удобно использовать функцию `enumerate` для получения как элемента, так и его индекса в цикле `for` :"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zhGXZJ5cDflf","outputId":"a6042e3d-2ae9-4d0a-a552-7c15abc9c73c"},"outputs":[{"name":"stdout","output_type":"stream","text":["row_idx 0 row [1 2]\n","col_idx 0 element 1\n","col_idx 1 element 2\n","row_idx 1 row [3 4]\n","col_idx 0 element 3\n","col_idx 1 element 4\n"]}],"source":["for row_idx, row in enumerate(M):\n","    print(\"row_idx\", row_idx, \"row\", row)\n","    \n","    for col_idx, element in enumerate(row):\n","        print(\"col_idx\", col_idx, \"element\", element)\n","       \n","        # обновляет матрицу M: возводя ее элементы в квадрат\n","        M[row_idx, col_idx] = element ** 2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WtMd1tfvDflf","outputId":"4d839173-d6ff-4275-ce10-15b6861dcd8d"},"outputs":[{"data":{"text/plain":["array([[ 1,  4],\n","       [ 9, 16]])"]},"execution_count":230,"metadata":{},"output_type":"execute_result"}],"source":["# каждый элемент в M возведен в квадрат\n","M"]},{"cell_type":"markdown","metadata":{"id":"UVuVYK5nDflf"},"source":["## Векторные функции"]},{"cell_type":"markdown","metadata":{"id":"RUuXTTRxDflf"},"source":["Как уже упоминалось несколько раз, чтобы получить хорошую производительность, мы должны стараться избегать циклического перебора элементов в наших векторах и матрицах, а вместо этого использовать векторизованные алгоритмы. Первый шаг в преобразовании скалярного алгоритма в векторизованный алгоритм заключается в том, чтобы убедиться, что функции, которые мы пишем, работают с векторными входными данными."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hOdhN6zlDflf"},"outputs":[],"source":["def Theta(x):\n","    \"\"\"\n","    Скалярная реализация функции порога Хевисайда.\n","    \"\"\"\n","    if x >= 0:\n","        return 1\n","    else:\n","        return 0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1X-IuiRSDflf","outputId":"53187d36-b1fa-481c-d94d-0233cd8e0f91"},"outputs":[{"ename":"ValueError","evalue":"The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[1;32m<ipython-input-232-2cb2062a7e18>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mTheta\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[1;32m<ipython-input-231-c9c3b027fcc6>\u001b[0m in \u001b[0;36mTheta\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m      3\u001b[0m     \u001b[0mСкалярная\u001b[0m \u001b[0mреализация\u001b[0m \u001b[0mфункции\u001b[0m \u001b[0mпорога\u001b[0m \u001b[0mХевисайда\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \"\"\"\n\u001b[1;32m----> 5\u001b[1;33m     \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;33m>=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;31mValueError\u001b[0m: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"]}],"source":["Theta(array([-3,-2,-1,0,1,2,3]))"]},{"cell_type":"markdown","metadata":{"id":"gjBPlSoGDflf"},"source":["Хорошо, это не сработало, потому что мы не написали функцию `Theta`, чтобы она могла обрабатывать векторный ввод...\n","\n","Чтобы получить векторизованную версию теты, мы можем использовать функцию Numpy `vectorize`. Во многих случаях он может автоматически векторизовать функцию:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y2wnhkiMDflg"},"outputs":[],"source":["Theta_vec = vectorize(Theta)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sb_afdwPDflg","outputId":"6aa44fc1-540b-4b03-e265-72b9134f2f08"},"outputs":[{"data":{"text/plain":["array([0, 0, 0, 1, 1, 1, 1])"]},"execution_count":234,"metadata":{},"output_type":"execute_result"}],"source":["Theta_vec(array([-3,-2,-1,0,1,2,3]))"]},{"cell_type":"markdown","metadata":{"id":"82khci1NDflg"},"source":["Мы также можем реализовать функцию для приема векторного ввода с самого начала (требует больше усилий, но может дать лучшую производительность):"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z30MkFJPDflg"},"outputs":[],"source":["def Theta(x):\n","    \"\"\"\n","    Vector-aware implemenation of the Heaviside step function.\n","    \"\"\"\n","    return 1 * (x >= 0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q2VFOncGDflg","outputId":"ed39af0f-61d5-4dd3-9bf5-f8e52533c8d8"},"outputs":[{"data":{"text/plain":["array([0, 0, 0, 1, 1, 1, 1])"]},"execution_count":236,"metadata":{},"output_type":"execute_result"}],"source":["Theta(array([-3,-2,-1,0,1,2,3]))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JfOM19AFDflg","outputId":"2ee45d4a-30cc-41ee-8479-94f6f5518197"},"outputs":[{"data":{"text/plain":["(0, 1)"]},"execution_count":237,"metadata":{},"output_type":"execute_result"}],"source":["# still works for scalars as well\n","Theta(-1.2), Theta(2.6)"]},{"cell_type":"markdown","metadata":{"id":"c8VYUgqPDflg"},"source":["## Использование массива в условии"]},{"cell_type":"markdown","metadata":{"id":"rmT0GGlWDflg"},"source":["При использовании массивов в условиях, например, `if` операторы и другие логические выражения, нужно использовать `any` или `all`, что требует, чтобы любой или все элементы в массиве равнялись `True`:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qXjRg1AwDflg","outputId":"a09e76af-52a4-4f8e-c7dc-38fd12c9a5c5"},"outputs":[{"data":{"text/plain":["array([[ 1,  4],\n","       [ 9, 16]])"]},"execution_count":238,"metadata":{},"output_type":"execute_result"}],"source":["M"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ra-s3b0pDflg","outputId":"4520aabb-a3a2-44ef-961c-772ffca3bc85"},"outputs":[{"name":"stdout","output_type":"stream","text":["at least one element in M is larger than 5\n"]}],"source":["if (M > 5).any():\n","    print(\"at least one element in M is larger than 5\")\n","else:\n","    print(\"no element in M is larger than 5\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"okx4Z79wDflh","outputId":"657e8119-c1a4-4cf3-b80b-bd2aaa216d69"},"outputs":[{"name":"stdout","output_type":"stream","text":["all elements in M are not larger than 5\n"]}],"source":["if (M > 5).all():\n","    print(\"all elements in M are larger than 5\")\n","else:\n","    print(\"all elements in M are not larger than 5\")"]},{"cell_type":"markdown","metadata":{"id":"8aVX1WN-Dflh"},"source":["## Подбор типа"]},{"cell_type":"markdown","metadata":{"id":"OcPM1HqEDflh"},"source":["Поскольку массивы Numpy статически типизированы, тип массива не изменяется после его создания. Но мы можем явно привести массив некоторого типа к другому, используя функции `astype` (см. также аналогичную функцию `asarray`). Это всегда создает новый массив нового типа:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u4EuNh80Dflh","outputId":"c8c3f476-32c2-4ec1-99b1-48e07a65e8e9"},"outputs":[{"data":{"text/plain":["dtype('int32')"]},"execution_count":241,"metadata":{},"output_type":"execute_result"}],"source":["M.dtype"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JwonOCEdDflh","outputId":"be322f43-e7e2-4ec8-cbaf-310ab6637457"},"outputs":[{"data":{"text/plain":["array([[ 1.,  4.],\n","       [ 9., 16.]])"]},"execution_count":242,"metadata":{},"output_type":"execute_result"}],"source":["M2 = M.astype(float)\n","\n","M2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-CrJ4JPfDflh","outputId":"78d618b9-28eb-4637-afb2-afaecc899753"},"outputs":[{"data":{"text/plain":["dtype('float64')"]},"execution_count":243,"metadata":{},"output_type":"execute_result"}],"source":["M2.dtype"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hLYaU96vDflh","outputId":"67edbb3d-cc07-4eab-8e39-a035a5c6e426"},"outputs":[{"data":{"text/plain":["array([[ True,  True],\n","       [ True,  True]])"]},"execution_count":244,"metadata":{},"output_type":"execute_result"}],"source":["M3 = M.astype(bool)\n","\n","M3"]},{"cell_type":"markdown","metadata":{"id":"11YjvBcODflh"},"source":["## Дальнейшее изучение"]},{"cell_type":"markdown","metadata":{"id":"IGmxmHvVDflh"},"source":["* http://numpy.scipy.org\n","* [Tentative NumPy Tutorial](http://scipy.org/Tentative_NumPy_Tutorial)\n","* [A Numpy guide for MATLAB users](http://scipy.org/NumPy_for_Matlab_Users).\n","* Этот [материал](http://github.com/jrjohansson/scientific-python-lectures) создан на основе книг [J.R. Johansson](http://jrjohansson.github.io)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i2HRQ-r0Dflh"},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.0"},"nbTranslate":{"displayLangs":["*"],"hotkey":"alt-t","langInMainMenu":true,"sourceLang":"en","targetLang":"fr","useGoogleTranslate":true},"colab":{"provenance":[{"file_id":"https://github.com/koroteevmv/ML_course/blob/main/ML0.1_numpy/ml0x_numpy.ipynb","timestamp":1662455260381}],"collapsed_sections":["GPkrNKtzDflW","a-hWEq37DflX","-xe6hL1hDflX","SZCTiRSPDflX","R18fMUbUDflY","0exi1oDaDflZ","xGbF9Y_jDflZ","L-M6344RDfla","dzOQPrrRDflb","-A9EqUShDflc","HpFPMh_TDflc","UTmk5hgHDfld","sTK_uczrDfld","aRHfDP1YDfld","CStW1BKtDfle","UVuVYK5nDflf","8aVX1WN-Dflh"],"toc_visible":true}},"nbformat":4,"nbformat_minor":0}