{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP+M/I6cCKWutVf60PYHY/i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"HdMDw4TZWhbP","executionInfo":{"status":"ok","timestamp":1664842199811,"user_tz":-180,"elapsed":694,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import numpy as np"]},{"cell_type":"code","source":["mvid = pd.read_csv('/content/MVID_101001_171001.txt')\n","sber = pd.read_csv('/content/SBER_101001_171001.txt')"],"metadata":{"id":"g0C7S2zwWssg","executionInfo":{"status":"ok","timestamp":1664842213963,"user_tz":-180,"elapsed":296,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["sber.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"B1GuaHwUXZV5","executionInfo":{"status":"ok","timestamp":1664842216028,"user_tz":-180,"elapsed":281,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"3369ab91-1585-4811-be8e-b115ecb773bc"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  <TICKER> <PER>    <DATE>  <TIME>  <CLOSE>      <VOL>\n","0     SBER     D  20101001       0    89.09  332429890\n","1     SBER     D  20101004       0    89.88  194032721\n","2     SBER     D  20101005       0    91.97  198775753\n","3     SBER     D  20101006       0    91.20  210406027\n","4     SBER     D  20101007       0    90.40  145137617"],"text/html":["\n","  <div id=\"df-262bbf9f-6283-48e6-b9e3-ee6869184637\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>&lt;TICKER&gt;</th>\n","      <th>&lt;PER&gt;</th>\n","      <th>&lt;DATE&gt;</th>\n","      <th>&lt;TIME&gt;</th>\n","      <th>&lt;CLOSE&gt;</th>\n","      <th>&lt;VOL&gt;</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101001</td>\n","      <td>0</td>\n","      <td>89.09</td>\n","      <td>332429890</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101004</td>\n","      <td>0</td>\n","      <td>89.88</td>\n","      <td>194032721</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101005</td>\n","      <td>0</td>\n","      <td>91.97</td>\n","      <td>198775753</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101006</td>\n","      <td>0</td>\n","      <td>91.20</td>\n","      <td>210406027</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101007</td>\n","      <td>0</td>\n","      <td>90.40</td>\n","      <td>145137617</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-262bbf9f-6283-48e6-b9e3-ee6869184637')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-262bbf9f-6283-48e6-b9e3-ee6869184637 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-262bbf9f-6283-48e6-b9e3-ee6869184637');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["mvid.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"TawpLIT8Xrpb","executionInfo":{"status":"ok","timestamp":1664842222148,"user_tz":-180,"elapsed":334,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"ee55f48b-c5b8-4dbb-d613-a440f772606c"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  <TICKER> <PER>    <DATE>  <TIME>  <CLOSE>   <VOL>\n","0     MVID     D  20101001       0   194.38   19406\n","1     MVID     D  20101004       0   190.00   31039\n","2     MVID     D  20101005       0   187.00   17651\n","3     MVID     D  20101006       0   190.04   36482\n","4     MVID     D  20101007       0   199.85  204248"],"text/html":["\n","  <div id=\"df-81208c99-5790-4345-a6d4-04377da6b12c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>&lt;TICKER&gt;</th>\n","      <th>&lt;PER&gt;</th>\n","      <th>&lt;DATE&gt;</th>\n","      <th>&lt;TIME&gt;</th>\n","      <th>&lt;CLOSE&gt;</th>\n","      <th>&lt;VOL&gt;</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>20101001</td>\n","      <td>0</td>\n","      <td>194.38</td>\n","      <td>19406</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>20101004</td>\n","      <td>0</td>\n","      <td>190.00</td>\n","      <td>31039</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>20101005</td>\n","      <td>0</td>\n","      <td>187.00</td>\n","      <td>17651</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>20101006</td>\n","      <td>0</td>\n","      <td>190.04</td>\n","      <td>36482</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>20101007</td>\n","      <td>0</td>\n","      <td>199.85</td>\n","      <td>204248</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-81208c99-5790-4345-a6d4-04377da6b12c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-81208c99-5790-4345-a6d4-04377da6b12c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-81208c99-5790-4345-a6d4-04377da6b12c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["res = pd.merge(sber, mvid, on='<DATE>')\n","res.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"hVv--19SXzQ-","executionInfo":{"status":"ok","timestamp":1664842225141,"user_tz":-180,"elapsed":305,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"a6966d23-a932-416e-ee22-7648a2cfcb85"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  <TICKER>_x <PER>_x    <DATE>  <TIME>_x  <CLOSE>_x    <VOL>_x <TICKER>_y  \\\n","0       SBER       D  20101001         0      89.09  332429890       MVID   \n","1       SBER       D  20101004         0      89.88  194032721       MVID   \n","2       SBER       D  20101005         0      91.97  198775753       MVID   \n","3       SBER       D  20101006         0      91.20  210406027       MVID   \n","4       SBER       D  20101007         0      90.40  145137617       MVID   \n","\n","  <PER>_y  <TIME>_y  <CLOSE>_y  <VOL>_y  \n","0       D         0     194.38    19406  \n","1       D         0     190.00    31039  \n","2       D         0     187.00    17651  \n","3       D         0     190.04    36482  \n","4       D         0     199.85   204248  "],"text/html":["\n","  <div id=\"df-ef47240d-5df6-44c4-9ec0-0b20e4d4c044\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>&lt;TICKER&gt;_x</th>\n","      <th>&lt;PER&gt;_x</th>\n","      <th>&lt;DATE&gt;</th>\n","      <th>&lt;TIME&gt;_x</th>\n","      <th>&lt;CLOSE&gt;_x</th>\n","      <th>&lt;VOL&gt;_x</th>\n","      <th>&lt;TICKER&gt;_y</th>\n","      <th>&lt;PER&gt;_y</th>\n","      <th>&lt;TIME&gt;_y</th>\n","      <th>&lt;CLOSE&gt;_y</th>\n","      <th>&lt;VOL&gt;_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101001</td>\n","      <td>0</td>\n","      <td>89.09</td>\n","      <td>332429890</td>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>0</td>\n","      <td>194.38</td>\n","      <td>19406</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101004</td>\n","      <td>0</td>\n","      <td>89.88</td>\n","      <td>194032721</td>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>0</td>\n","      <td>190.00</td>\n","      <td>31039</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101005</td>\n","      <td>0</td>\n","      <td>91.97</td>\n","      <td>198775753</td>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>0</td>\n","      <td>187.00</td>\n","      <td>17651</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101006</td>\n","      <td>0</td>\n","      <td>91.20</td>\n","      <td>210406027</td>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>0</td>\n","      <td>190.04</td>\n","      <td>36482</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>SBER</td>\n","      <td>D</td>\n","      <td>20101007</td>\n","      <td>0</td>\n","      <td>90.40</td>\n","      <td>145137617</td>\n","      <td>MVID</td>\n","      <td>D</td>\n","      <td>0</td>\n","      <td>199.85</td>\n","      <td>204248</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef47240d-5df6-44c4-9ec0-0b20e4d4c044')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ef47240d-5df6-44c4-9ec0-0b20e4d4c044 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ef47240d-5df6-44c4-9ec0-0b20e4d4c044');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["x = res['<CLOSE>_x']\n","y = res['<CLOSE>_y']"],"metadata":{"id":"JDqrUOhcYLkg","executionInfo":{"status":"ok","timestamp":1664842228128,"user_tz":-180,"elapsed":5,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["plt.figure()\n","plt.scatter(x, y)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"fjXkNxzBYSzD","executionInfo":{"status":"ok","timestamp":1664842231607,"user_tz":-180,"elapsed":13,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"6f7b7f6f-d0d6-4ac1-f618-a6761d625eaf"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["class hypothesis(object):\n","    \"\"\"Модель парной линейной регрессии\"\"\"\n","    def __init__(self):\n","        self.b0 = 0\n","        self.b1 = 0\n","    \n","    \n","    def predict(self, x):\n","      return self.b0 + self.b1 * x\n","    \n","    \n","    def error(self, X, Y):    \n","      return sum((self.predict(X) - Y)**2) / (2 * len(X)) \n","    def BGD(self, X, Y):  \n","      alpha = 0.00005\n","      dJ0 = sum(self.predict(X) - Y) /len(X)\n","      dJ1 = sum((self.predict(X) - Y) * X) /len(X)\n","      self.b0 -= alpha * dJ0\n","      self.b1 -= alpha * dJ1\n","    def BGD(self, X, Y, alpha=0.000005, accuracy=0.01, max_steps=5000):\n","        steps, errors = [], []\n","        step = 0        \n","        old_err = hyp.error(X, Y)\n","        new_err = hyp.error(X, Y) - 1\n","        dJ = 1\n","        while (dJ > accuracy) and (steps  > max_steps):\n","            dJ0 = sum(self.predict(X) - Y) /len(X)\n","            dJ1 = sum((self.predict(X) - Y) * X) /len(X)\n","            self.b0 -= alpha * dJ0\n","            self.b1 -= alpha * dJ1            \n","            old_err = new_err\n","            new_err = hyp.error(X, Y)\n","            dJ = abs(old_err - new_err) \n","            step += 1            \n","            steps.append(step)\n","            errors.append(new_err)\n","        return steps, errors\n"," "],"metadata":{"id":"YRjGDlsTYftF","executionInfo":{"status":"ok","timestamp":1664843277290,"user_tz":-180,"elapsed":266,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["class hypothesis(object):\n","    \"\"\"Модель парной линейной регрессии\"\"\"\n","    def __init__(self):\n","        self.b0 = 0\n","        self.b1 = 0\n","    def predict(self, x):\n","        return self.b0 + self.b1 * x\n","    def error(self, X, Y):    \n","        return sum((self.predict(X) - Y)**2) / (2 * len(X)) \n","    # def BGD(self, X, Y):  \n","    #     alpha = 0.00005\n","    #     dJ0 = sum(self.predict(X) - Y) /len(X)\n","    #     dJ1 = sum((self.predict(X) - Y) * X) /len(X)\n","    #     self.b0 -= alpha * dJ0\n","    #     self.b1 -= alpha * dJ1        \n","    def BGD(self, X, Y, alpha=0.000005, accuracy=0.01, max_steps=5000):\n","        steps, errors = [], []\n","        step = 0        \n","        old_err = hyp.error(X, Y)\n","        new_err = hyp.error(X, Y) - 1\n","        dJ = 1\n","        while (dJ > accuracy) and (steps  > max_steps):\n","            dJ0 = sum(self.predict(X) - Y) /len(X)\n","            dJ1 = sum((self.predict(X) - Y) * X) /len(X)\n","            self.b0 -= alpha * dJ0\n","            self.b1 -= alpha * dJ1            \n","            old_err = new_err\n","            new_err = hyp.error(X, Y)\n","            dJ = abs(old_err - new_err) \n","            step += 1            \n","            steps.append(step)\n","            errors.append(new_err)\n","        return steps, errors"],"metadata":{"id":"-mC7u6lZXD4v","executionInfo":{"status":"ok","timestamp":1664843353284,"user_tz":-180,"elapsed":295,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["hyp = hypothesis()\n","print(hyp.predict(0))\n","print(hyp.predict(100))\n","J = hyp.error(x, y)\n","print(\"initial error:\", J)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OhuyjinvXTjq","executionInfo":{"status":"ok","timestamp":1664843356644,"user_tz":-180,"elapsed":268,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"c0ca1885-0be8-4d7f-f3a8-834014dbcf37"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","0\n","initial error: 36271.58344889084\n"]}]},{"cell_type":"code","source":["X0 = np.linspace(60, 180, 100)\n","Y0 = hyp.predict(X0)\n","plt.figure()\n","plt.scatter(x, y)\n","plt.plot(X0, Y0, 'r')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"4eXH9bD_Xaa9","executionInfo":{"status":"ok","timestamp":1664843359098,"user_tz":-180,"elapsed":308,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"45b36506-bba4-4cf8-aaa5-570aeb30654f"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[],"metadata":{"id":"nNXOyrlOXd5_","executionInfo":{"status":"ok","timestamp":1664842978418,"user_tz":-180,"elapsed":3,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"F7pnpobmXjgW","executionInfo":{"status":"ok","timestamp":1664842963682,"user_tz":-180,"elapsed":275,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["hyp = hypothesis()\n","print(hyp.predict(0))\n","print(hyp.predict(100))\n","J = hyp.error(x, y)\n","print(\"initial error:\", J)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hscOEKNEZZI-","executionInfo":{"status":"ok","timestamp":1664843363037,"user_tz":-180,"elapsed":375,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"3ba0d947-f541-4b0f-ad8f-11aca377dfd2"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","0\n","initial error: 36271.58344889084\n"]}]},{"cell_type":"code","source":["X0 = np.linspace(60, 180, 100)\n","Y0 = hyp.predict(X0)\n","plt.figure()\n","plt.scatter(x, y)\n","plt.plot(X0, Y0, 'r')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"bn1--PbgZ8yq","executionInfo":{"status":"ok","timestamp":1664843364941,"user_tz":-180,"elapsed":376,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"010f071d-b3a1-4367-e2c4-f77c5eee525e"},"execution_count":52,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["hyp.BGD(x, y)\n","J = hyp.error(x, y)\n","print(\"error after gradient descent:\", J)\n","\n","X0 = np.linspace(60, 180, 100)\n","Y0 = hyp.predict(X0)\n","plt.figure()\n","plt.scatter(x, y)\n","plt.plot(X0, Y0, 'r')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"0AJ_86pJX_vH","executionInfo":{"status":"error","timestamp":1664843368331,"user_tz":-180,"elapsed":293,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"9516d0c8-7ef6-4c94-93a8-16eca9af1a9f"},"execution_count":53,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-53-3ec351f98596>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBGD\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mJ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"error after gradient descent:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mJ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mX0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m60\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m180\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-48-5e940f572314>\u001b[0m in \u001b[0;36mBGD\u001b[0;34m(self, X, Y, alpha, accuracy, max_steps)\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mnew_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mdJ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m         \u001b[0;32mwhile\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdJ\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msteps\u001b[0m  \u001b[0;34m>\u001b[0m \u001b[0mmax_steps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m             \u001b[0mdJ0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m             \u001b[0mdJ1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: '>' not supported between instances of 'list' and 'int'"]}]},{"cell_type":"code","source":["hyp.BGD(x, y)\n","J = hyp.error(x, y)\n","print(\"error after gradient descent:\", J)\n","\n","X0 = np.linspace(60, 180, 100)\n","Y0 = hyp.predict(X0)\n","plt.figure()\n","plt.scatter(x, y)\n","plt.plot(X0, Y0, 'r')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"8xV9c2KLYGbU","executionInfo":{"status":"error","timestamp":1664843382097,"user_tz":-180,"elapsed":262,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"d69abe29-2562-472f-93e3-da025430ec25"},"execution_count":54,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-54-3ec351f98596>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBGD\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mJ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"error after gradient descent:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mJ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mX0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m60\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m180\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-48-5e940f572314>\u001b[0m in \u001b[0;36mBGD\u001b[0;34m(self, X, Y, alpha, accuracy, max_steps)\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mnew_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mdJ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m         \u001b[0;32mwhile\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdJ\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msteps\u001b[0m  \u001b[0;34m>\u001b[0m \u001b[0mmax_steps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m             \u001b[0mdJ0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m             \u001b[0mdJ1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: '>' not supported between instances of 'list' and 'int'"]}]},{"cell_type":"code","source":["hyp.BGD(x, y)\n","J = hyp.error(x, y)\n","print(\"error after gradient descent:\", J)\n","\n","X0 = np.linspace(60, 180, 100)\n","Y0 = hyp.predict(X0)\n","plt.figure()\n","plt.scatter(x, y)\n","plt.plot(X0, Y0, 'r')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"yNIaU5rSagUD","executionInfo":{"status":"error","timestamp":1664843387133,"user_tz":-180,"elapsed":421,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"7447fe72-7557-418d-de77-69f1b0e3a26c"},"execution_count":55,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-3ec351f98596>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBGD\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mJ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"error after gradient descent:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mJ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mX0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m60\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m180\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-48-5e940f572314>\u001b[0m in \u001b[0;36mBGD\u001b[0;34m(self, X, Y, alpha, accuracy, max_steps)\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mnew_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mdJ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m         \u001b[0;32mwhile\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdJ\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0msteps\u001b[0m  \u001b[0;34m>\u001b[0m \u001b[0mmax_steps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m             \u001b[0mdJ0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m             \u001b[0mdJ1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: '>' not supported between instances of 'list' and 'int'"]}]},{"cell_type":"code","source":[],"metadata":{"id":"uF6Y8S8cbgvd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_8NhEvC2bob7","executionInfo":{"status":"ok","timestamp":1664843008115,"user_tz":-180,"elapsed":266,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["hyp.retu"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"id":"-AqzqAQ-b-7d","executionInfo":{"status":"error","timestamp":1664843243553,"user_tz":-180,"elapsed":294,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"1457a077-f70c-4b91-9c96-ff026ce99abd"},"execution_count":40,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-d63db1eacb86>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhyp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretu\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'hypothesis' object has no attribute 'retu'"]}]},{"cell_type":"code","source":["plt.figure()\n","plt.plot(steps, errors, 'g')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":217},"id":"vDWbTFgBcBxS","executionInfo":{"status":"error","timestamp":1664843391743,"user_tz":-180,"elapsed":275,"user":{"displayName":"Payrav Kahorov","userId":"15127841572095814136"}},"outputId":"3bd39912-9c4b-43ef-ddd5-271f29889a75"},"execution_count":56,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-56-63a52390439f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'g'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'steps' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["\n"],"metadata":{"id":"YExrCJ7BcJJE"},"execution_count":null,"outputs":[]}]}